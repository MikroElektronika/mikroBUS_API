module __em_STM32_generic_LOG
include __t_STM32

#IFDEF ENABLE_LOG THEN

sub procedure _log_write(dim data_ as ^uint8_t)

sub function _log_init1(dim baud as uint32_t) as T_mikrobus_ret
sub function _log_init2(dim baud as uint32_t) as T_mikrobus_ret
sub function _log_initUartA(dim baud as uint32_t) as T_mikrobus_ret
sub function _log_initUartB(dim baud as uint32_t) as T_mikrobus_ret

#ENDIF

implements

const _MIKROBUS_ERR_LOG          as byte = 6

' ------------------------------------------------------------ SYSTEM SPECIFIC '

#IFDEF ENABLE_LOG THEN

dim logger as ^T_log_writeFp

sub function _log_init1(dim baud as uint32_t) as T_mikrobus_ret
    Result = 0 
    UART3_Init_Advanced(baud, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, @_GPIO_MODULE_USART3_PD89)
    logger = @UART3_Write
end sub
sub function _log_init2(dim baud as uint32_t) as T_mikrobus_ret
    Result = 0 
    UART2_Init_Advanced(baud, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, @_GPIO_MODULE_USART2_PD56)
    logger = @UART2_Write
end sub

sub function _log_initUartA(dim baud as uint32_t) as T_mikrobus_ret
    Result = 0 
    UART1_Init_Advanced(baud, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, @_GPIO_MODULE_USART1_PA9_10)
    logger = @UART1_Write
end sub

sub function _log_initUartB(dim baud as uint32_t) as T_mikrobus_ret
    Result = 0 
    UART2_Init_Advanced(baud, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, @_GPIO_MODULE_USART2_PD56)
    logger = @UART2_Write
end sub


sub procedure _log_write(dim data_ as ^uint8_t)

    logger( data_^ )
end sub

#ENDIF

end.