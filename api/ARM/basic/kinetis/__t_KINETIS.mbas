module __t_KINETIS

typedef uint8_t                 as byte
typedef int8_t                  as short
typedef uint16_t                as word
typedef int16_t                 as integer
typedef uint32_t                as longword
typedef int32_t                 as longint

typedef T_gpio_dir              as byte
typedef T_mikrobus_soc          as byte
typedef T_mikrobus_pin          as byte
typedef T_mikrobus_ret          as byte

' ---------------------------------------------------- COMPILER SPECIFIC TYPES '

typedef T_gpio_getFp            as sub function() as uint8_t
typedef T_gpio_setFp            as sub procedure(dim state as uint8_t)

typedef T_gpio_setFp_           as ^T_gpio_setFp
typedef T_gpio_getFp_           as ^T_gpio_getFp

#IFDEF ENABLE_LOG THEN

typedef T_log_bus               as byte
typedef T_log_format            as byte
typedef T_log_writeFp           as sub procedure(dim data_ as word)

#ENDIF
#IFDEF ENABLE_SPI THEN

typedef T_spi_writeFp           as sub procedure(dim data_out as word)
typedef T_spi_readFP            as sub function(dim x as word) as word

#ENDIF
#IFDEF ENABLE_I2C THEN

typedef T_i2c_startFp           as sub function() as word
typedef T_i2c_writeFp           as sub function(dim slave_address as byte, dim ptrdata as ^byte, dim count as longword, dim END_mode as longword) as word
typedef T_i2c_readFp            as sub procedure(dim slave_address as byte, dim ptrdata as ^byte, dim count as longword, dim END_mode as longword)
#ENDIF
#IFDEF ENABLE_UART THEN

typedef T_uart_writeFp          as sub procedure(dim data_ as word)
typedef T_uart_readFp           as sub function() as word
typedef T_uart_rdyFp            as sub function() as word

#ENDIF

' -------------------------------------------------------------- HAL STRUCTUES '
' DO NOT EDIT '

structure T_gpio_obj
    dim gpioSet                 as T_gpio_setFp_[ 12 ]
    dim gpioGet                 as T_gpio_getFp_[ 12 ]
end structure

#IFDEF ENABLE_SPI THEN

structure T_spi_obj
    dim spiWrite                as ^T_spi_writeFp
    dim spiRead                 as ^T_spi_readFP
end structure

#ENDIF
#IFDEF ENABLE_I2C THEN

structure T_i2c_obj
    dim i2cStart                as ^T_i2c_startFp
    dim i2cWrite                as ^T_i2c_writeFp
    dim i2cRead                 as ^T_i2c_readFp
end structure

#ENDIF
#IFDEF ENABLE_UART THEN

structure T_uart_obj
    dim uartWrite               as ^T_uart_writeFp
    dim uartRead                as ^T_uart_readFp
    dim uartReady               as ^T_uart_rdyFp
end structure

#ENDIF

implements

end.