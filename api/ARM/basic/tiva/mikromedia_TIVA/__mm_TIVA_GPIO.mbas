module __mm_TIVA_GPIO
include __t_TIVA 

sub function _getAN_1  () as uint8_t
sub function _getRST_1 () as uint8_t
sub function _getCS_1  () as uint8_t
sub function _getSCK_1 () as uint8_t
sub function _getMISO_1() as uint8_t
sub function _getMOSI_1() as uint8_t
sub function _getPWM_1 () as uint8_t
sub function _getINT_1 () as uint8_t
sub function _getRX_1  () as uint8_t
sub function _getTX_1  () as uint8_t
sub function _getSCL_1 () as uint8_t
sub function _getSDA_1 () as uint8_t
sub procedure _setAN_1  (dim state as uint8_t)
sub procedure _setRST_1 (dim state as uint8_t)
sub procedure _setCS_1  (dim state as uint8_t)
sub procedure _setSCK_1 (dim state as uint8_t)
sub procedure _setMISO_1(dim state as uint8_t)
sub procedure _setMOSI_1(dim state as uint8_t)
sub procedure _setPWM_1 (dim state as uint8_t)
sub procedure _setINT_1 (dim state as uint8_t)
sub procedure _setRX_1  (dim state as uint8_t)
sub procedure _setTX_1  (dim state as uint8_t)
sub procedure _setSCL_1 (dim state as uint8_t)
sub procedure _setSDA_1 (dim state as uint8_t)

sub function _getAN_2  () as uint8_t
sub function _getRST_2 () as uint8_t
sub function _getCS_2  () as uint8_t
sub function _getSCK_2 () as uint8_t
sub function _getMISO_2() as uint8_t
sub function _getMOSI_2() as uint8_t
sub function _getPWM_2 () as uint8_t
sub function _getINT_2 () as uint8_t
sub function _getRX_2  () as uint8_t
sub function _getTX_2  () as uint8_t
sub function _getSCL_2 () as uint8_t
sub function _getSDA_2 () as uint8_t
sub procedure _setAN_2  (dim state as uint8_t)
sub procedure _setRST_2 (dim state as uint8_t)
sub procedure _setCS_2  (dim state as uint8_t)
sub procedure _setSCK_2 (dim state as uint8_t)
sub procedure _setMISO_2(dim state as uint8_t)
sub procedure _setMOSI_2(dim state as uint8_t)
sub procedure _setPWM_2 (dim state as uint8_t)
sub procedure _setINT_2 (dim state as uint8_t)
sub procedure _setRX_2  (dim state as uint8_t)
sub procedure _setTX_2  (dim state as uint8_t)
sub procedure _setSCL_2 (dim state as uint8_t)
sub procedure _setSDA_2 (dim state as uint8_t)

sub function _gpioInit_1(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret
sub function _gpioInit_2(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret

implements

const _MIKROBUS_ERR_PIN          as byte = 2

const _GPIO_INPUT                as byte = 0
const _GPIO_OUTPUT               as byte = 1

const _MIKROBUS_AN_PIN           as byte = 0
const _MIKROBUS_RST_PIN          as byte = 1
const _MIKROBUS_CS_PIN           as byte = 2
const _MIKROBUS_SCK_PIN          as byte = 3
const _MIKROBUS_MISO_PIN         as byte = 4
const _MIKROBUS_MOSI_PIN         as byte = 5
const _MIKROBUS_PWM_PIN          as byte = 6
const _MIKROBUS_INT_PIN          as byte = 7
const _MIKROBUS_RX_PIN           as byte = 8
const _MIKROBUS_TX_PIN           as byte = 9
const _MIKROBUS_SCL_PIN          as byte = 10
const _MIKROBUS_SDA_PIN          as byte = 11


sub function _getAN_1  () as uint8_t Result = GPIO_PORTE_DATA.B3 end sub
sub function _getRST_1 () as uint8_t Result = GPIO_PORTC_DATA.B1 end sub
sub function _getCS_1  () as uint8_t Result = GPIO_PORTC_DATA.B3 end sub
sub function _getSCK_1 () as uint8_t Result = GPIO_PORTA_DATA.B2 end sub
sub function _getMISO_1() as uint8_t Result = GPIO_PORTA_DATA.B4 end sub
sub function _getMOSI_1() as uint8_t Result = GPIO_PORTA_DATA.B5 end sub
sub function _getPWM_1 () as uint8_t Result = GPIO_PORTH_DATA.B4 end sub
sub function _getINT_1 () as uint8_t Result = GPIO_PORTH_DATA.B0 end sub
sub function _getRX_1  () as uint8_t Result = GPIO_PORTA_DATA.B0 end sub
sub function _getTX_1  () as uint8_t Result = GPIO_PORTA_DATA.B1 end sub
sub function _getSCL_1 () as uint8_t Result = GPIO_PORTB_DATA.B2 end sub
sub function _getSDA_1 () as uint8_t Result = GPIO_PORTB_DATA.B3 end sub
sub procedure _setAN_1  (dim state as uint8_t) GPIO_PORTE_DATA.B3 = state end sub
sub procedure _setRST_1 (dim state as uint8_t) GPIO_PORTC_DATA.B1 = state end sub
sub procedure _setCS_1  (dim state as uint8_t) GPIO_PORTC_DATA.B3 = state end sub
sub procedure _setSCK_1 (dim state as uint8_t) GPIO_PORTA_DATA.B2 = state end sub
sub procedure _setMISO_1(dim state as uint8_t) GPIO_PORTA_DATA.B4 = state end sub
sub procedure _setMOSI_1(dim state as uint8_t) GPIO_PORTA_DATA.B5 = state end sub
sub procedure _setPWM_1 (dim state as uint8_t) GPIO_PORTH_DATA.B4 = state end sub
sub procedure _setINT_1 (dim state as uint8_t) GPIO_PORTH_DATA.B0 = state end sub
sub procedure _setRX_1  (dim state as uint8_t) GPIO_PORTA_DATA.B0 = state end sub
sub procedure _setTX_1  (dim state as uint8_t) GPIO_PORTA_DATA.B1 = state end sub
sub procedure _setSCL_1 (dim state as uint8_t) GPIO_PORTB_DATA.B2 = state end sub
sub procedure _setSDA_1 (dim state as uint8_t) GPIO_PORTB_DATA.B3 = state end sub

sub function _getAN_2  () as uint8_t Result = GPIO_PORTE_DATA.B2 end sub
sub function _getRST_2 () as uint8_t Result = GPIO_PORTC_DATA.B2 end sub
sub function _getCS_2  () as uint8_t Result = GPIO_PORTB_DATA.B5 end sub
sub function _getSCK_2 () as uint8_t Result = GPIO_PORTA_DATA.B2 end sub
sub function _getMISO_2() as uint8_t Result = GPIO_PORTA_DATA.B4 end sub
sub function _getMOSI_2() as uint8_t Result = GPIO_PORTA_DATA.B5 end sub
sub function _getPWM_2 () as uint8_t Result = GPIO_PORTH_DATA.B5 end sub
sub function _getINT_2 () as uint8_t Result = GPIO_PORTH_DATA.B1 end sub
sub function _getRX_2  () as uint8_t Result = GPIO_PORTA_DATA.B0 end sub
sub function _getTX_2  () as uint8_t Result = GPIO_PORTA_DATA.B1 end sub
sub function _getSCL_2 () as uint8_t Result = GPIO_PORTB_DATA.B2 end sub
sub function _getSDA_2 () as uint8_t Result = GPIO_PORTB_DATA.B3 end sub
sub procedure _setAN_2  (dim state as uint8_t) GPIO_PORTE_DATA.B2 = state end sub
sub procedure _setRST_2 (dim state as uint8_t) GPIO_PORTC_DATA.B2 = state end sub
sub procedure _setCS_2  (dim state as uint8_t) GPIO_PORTB_DATA.B5 = state end sub
sub procedure _setSCK_2 (dim state as uint8_t) GPIO_PORTA_DATA.B2 = state end sub
sub procedure _setMISO_2(dim state as uint8_t) GPIO_PORTA_DATA.B4 = state end sub
sub procedure _setMOSI_2(dim state as uint8_t) GPIO_PORTA_DATA.B5 = state end sub
sub procedure _setPWM_2 (dim state as uint8_t) GPIO_PORTH_DATA.B5 = state end sub
sub procedure _setINT_2 (dim state as uint8_t) GPIO_PORTH_DATA.B1 = state end sub
sub procedure _setRX_2  (dim state as uint8_t) GPIO_PORTA_DATA.B0 = state end sub
sub procedure _setTX_2  (dim state as uint8_t) GPIO_PORTA_DATA.B1 = state end sub
sub procedure _setSCL_2 (dim state as uint8_t) GPIO_PORTB_DATA.B2 = state end sub
sub procedure _setSDA_2 (dim state as uint8_t) GPIO_PORTB_DATA.B3 = state end sub

sub function _gpioInit_1(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret

Result = 0
    select case pin
                case _MIKROBUS_AN_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTE_DATA, _GPIO_PINMASK_3) else GPIO_Digital_Output(@GPIO_PORTE_DATA, _GPIO_PINMASK_3) end if
                case _MIKROBUS_RST_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTC_DATA, _GPIO_PINMASK_1) else GPIO_Digital_Output(@GPIO_PORTC_DATA, _GPIO_PINMASK_1) end if
                case _MIKROBUS_CS_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTC_DATA, _GPIO_PINMASK_3) else GPIO_Digital_Output(@GPIO_PORTC_DATA, _GPIO_PINMASK_3) end if
                case _MIKROBUS_SCK_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTA_DATA, _GPIO_PINMASK_2) else GPIO_Digital_Output(@GPIO_PORTA_DATA, _GPIO_PINMASK_2) end if
                case _MIKROBUS_MISO_PIN  if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTA_DATA, _GPIO_PINMASK_4) else GPIO_Digital_Output(@GPIO_PORTA_DATA, _GPIO_PINMASK_4) end if
                case _MIKROBUS_MOSI_PIN  if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTA_DATA, _GPIO_PINMASK_5) else GPIO_Digital_Output(@GPIO_PORTA_DATA, _GPIO_PINMASK_5) end if
                case _MIKROBUS_PWM_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTH_DATA, _GPIO_PINMASK_4) else GPIO_Digital_Output(@GPIO_PORTH_DATA, _GPIO_PINMASK_4) end if
                case _MIKROBUS_INT_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTH_DATA, _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTH_DATA, _GPIO_PINMASK_0) end if
                case _MIKROBUS_RX_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTA_DATA, _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTA_DATA, _GPIO_PINMASK_0) end if
                case _MIKROBUS_TX_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTA_DATA, _GPIO_PINMASK_1) else GPIO_Digital_Output(@GPIO_PORTA_DATA, _GPIO_PINMASK_1) end if
                case _MIKROBUS_SCL_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTB_DATA, _GPIO_PINMASK_2) else GPIO_Digital_Output(@GPIO_PORTB_DATA, _GPIO_PINMASK_2) end if
                case _MIKROBUS_SDA_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTB_DATA, _GPIO_PINMASK_3) else GPIO_Digital_Output(@GPIO_PORTB_DATA, _GPIO_PINMASK_3) end if
        case else Result = _MIKROBUS_ERR_PIN
    end select
end sub

sub function _gpioInit_2(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret

Result = 0
    select case pin
                case _MIKROBUS_AN_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTE_DATA, _GPIO_PINMASK_2) else GPIO_Digital_Output(@GPIO_PORTE_DATA, _GPIO_PINMASK_2) end if
                case _MIKROBUS_RST_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTC_DATA, _GPIO_PINMASK_2) else GPIO_Digital_Output(@GPIO_PORTC_DATA, _GPIO_PINMASK_2) end if
                case _MIKROBUS_CS_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTB_DATA, _GPIO_PINMASK_3) else GPIO_Digital_Output(@GPIO_PORTB_DATA, _GPIO_PINMASK_3) end if
                case _MIKROBUS_SCK_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTA_DATA, _GPIO_PINMASK_2) else GPIO_Digital_Output(@GPIO_PORTA_DATA, _GPIO_PINMASK_2) end if
                case _MIKROBUS_MISO_PIN  if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTA_DATA, _GPIO_PINMASK_4) else GPIO_Digital_Output(@GPIO_PORTA_DATA, _GPIO_PINMASK_4) end if
                case _MIKROBUS_MOSI_PIN  if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTA_DATA, _GPIO_PINMASK_5) else GPIO_Digital_Output(@GPIO_PORTA_DATA, _GPIO_PINMASK_5) end if
                case _MIKROBUS_PWM_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTH_DATA, _GPIO_PINMASK_5) else GPIO_Digital_Output(@GPIO_PORTH_DATA, _GPIO_PINMASK_5) end if
                case _MIKROBUS_INT_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTH_DATA, _GPIO_PINMASK_1) else GPIO_Digital_Output(@GPIO_PORTH_DATA, _GPIO_PINMASK_1) end if
                case _MIKROBUS_RX_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTA_DATA, _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTA_DATA, _GPIO_PINMASK_0) end if
                case _MIKROBUS_TX_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTA_DATA, _GPIO_PINMASK_1) else GPIO_Digital_Output(@GPIO_PORTA_DATA, _GPIO_PINMASK_1) end if
                case _MIKROBUS_SCL_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTB_DATA, _GPIO_PINMASK_2) else GPIO_Digital_Output(@GPIO_PORTB_DATA, _GPIO_PINMASK_2) end if
                case _MIKROBUS_SDA_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@GPIO_PORTB_DATA, _GPIO_PINMASK_3) else GPIO_Digital_Output(@GPIO_PORTB_DATA, _GPIO_PINMASK_3) end if
        case else Result = _MIKROBUS_ERR_PIN
    end select
end sub


end.