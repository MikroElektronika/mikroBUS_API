unit __mm_plus_TIVA_GPIO;
uses __t_TIVA;

function  _getAN_1  () : uint8_t;
function  _getRST_1 () : uint8_t;
function  _getCS_1  () : uint8_t;
function  _getSCK_1 () : uint8_t;
function  _getMISO_1() : uint8_t;
function  _getMOSI_1() : uint8_t;
function  _getPWM_1 () : uint8_t;
function  _getINT_1 () : uint8_t;
function  _getRX_1  () : uint8_t;
function  _getTX_1  () : uint8_t;
function  _getSCL_1 () : uint8_t;
function  _getSDA_1 () : uint8_t;
procedure _setAN_1  (state: uint8_t);
procedure _setRST_1 (state: uint8_t);
procedure _setCS_1  (state: uint8_t);
procedure _setSCK_1 (state: uint8_t);
procedure _setMISO_1(state: uint8_t);
procedure _setMOSI_1(state: uint8_t);
procedure _setPWM_1 (state: uint8_t);
procedure _setINT_1 (state: uint8_t);
procedure _setRX_1  (state: uint8_t);
procedure _setTX_1  (state: uint8_t);
procedure _setSCL_1 (state: uint8_t);
procedure _setSDA_1 (state: uint8_t);

function  _getAN_2  () : uint8_t;    
function  _getRST_2 () : uint8_t;    
function  _getCS_2  () : uint8_t;    
function  _getSCK_2 () : uint8_t;    
function  _getMISO_2() : uint8_t;    
function  _getMOSI_2() : uint8_t;    
function  _getPWM_2 () : uint8_t;    
function  _getINT_2 () : uint8_t;    
function  _getRX_2  () : uint8_t;    
function  _getTX_2  () : uint8_t;    
function  _getSCL_2 () : uint8_t;    
function  _getSDA_2 () : uint8_t;    
procedure _setAN_2  (state: uint8_t);
procedure _setRST_2 (state: uint8_t);
procedure _setCS_2  (state: uint8_t);
procedure _setSCK_2 (state: uint8_t);
procedure _setMISO_2(state: uint8_t);
procedure _setMOSI_2(state: uint8_t);
procedure _setPWM_2 (state: uint8_t);
procedure _setINT_2 (state: uint8_t);
procedure _setRX_2  (state: uint8_t);
procedure _setTX_2  (state: uint8_t);
procedure _setSCL_2 (state: uint8_t);
procedure _setSDA_2 (state: uint8_t);

function  _getAN_3  () : uint8_t;    
function  _getRST_3 () : uint8_t;    
function  _getCS_3  () : uint8_t;    
function  _getSCK_3 () : uint8_t;    
function  _getMISO_3() : uint8_t;    
function  _getMOSI_3() : uint8_t;    
function  _getPWM_3 () : uint8_t;    
function  _getINT_3 () : uint8_t;    
function  _getRX_3  () : uint8_t;    
function  _getTX_3  () : uint8_t;    
function  _getSCL_3 () : uint8_t;    
function  _getSDA_3 () : uint8_t;    
procedure _setAN_3  (state: uint8_t);
procedure _setRST_3 (state: uint8_t);
procedure _setCS_3  (state: uint8_t);
procedure _setSCK_3 (state: uint8_t);
procedure _setMISO_3(state: uint8_t);
procedure _setMOSI_3(state: uint8_t);
procedure _setPWM_3 (state: uint8_t);
procedure _setINT_3 (state: uint8_t);
procedure _setRX_3  (state: uint8_t);
procedure _setTX_3  (state: uint8_t);
procedure _setSCL_3 (state: uint8_t);
procedure _setSDA_3 (state: uint8_t);

function  _getAN_4  () : uint8_t;    
function  _getRST_4 () : uint8_t;    
function  _getCS_4  () : uint8_t;    
function  _getSCK_4 () : uint8_t;    
function  _getMISO_4() : uint8_t;    
function  _getMOSI_4() : uint8_t;    
function  _getPWM_4 () : uint8_t;    
function  _getINT_4 () : uint8_t;    
function  _getRX_4  () : uint8_t;    
function  _getTX_4  () : uint8_t;    
function  _getSCL_4 () : uint8_t;    
function  _getSDA_4 () : uint8_t;    
procedure _setAN_4  (state: uint8_t);
procedure _setRST_4 (state: uint8_t);
procedure _setCS_4  (state: uint8_t);
procedure _setSCK_4 (state: uint8_t);
procedure _setMISO_4(state: uint8_t);
procedure _setMOSI_4(state: uint8_t);
procedure _setPWM_4 (state: uint8_t);
procedure _setINT_4 (state: uint8_t);
procedure _setRX_4  (state: uint8_t);
procedure _setTX_4  (state: uint8_t);
procedure _setSCL_4 (state: uint8_t);
procedure _setSDA_4 (state: uint8_t);

function _gpioInit_1(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
function _gpioInit_2(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
function _gpioInit_3(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
function _gpioInit_4(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;

implementation

const _MIKROBUS_ERR_PIN  : byte = 1;                

const _GPIO_INPUT        : byte = 0;
const _GPIO_OUTPUT       : byte = 1;

const _MIKROBUS_AN_PIN   : byte = 0;
const _MIKROBUS_RST_PIN  : byte = 1;
const _MIKROBUS_CS_PIN   : byte = 2;
const _MIKROBUS_SCK_PIN  : byte = 3;
const _MIKROBUS_MISO_PIN : byte = 4;
const _MIKROBUS_MOSI_PIN : byte = 5;
const _MIKROBUS_PWM_PIN  : byte = 6;
const _MIKROBUS_INT_PIN  : byte = 7;
const _MIKROBUS_RX_PIN   : byte = 8;
const _MIKROBUS_TX_PIN   : byte = 9;
const _MIKROBUS_SCL_PIN  : byte = 10;
const _MIKROBUS_SDA_PIN  : byte = 11;

// ----------------------------------------------------------- SYSTEM SPECIFIC /

function  _getAN_1  () : uint8_t;     begin Result := GPIO_PORTD_AHB_DATA.B0; end;
function  _getRST_1 () : uint8_t;     begin Result := GPIO_PORTD_AHB_DATA.B4; end;
function  _getCS_1  () : uint8_t;     begin Result := GPIO_PORTD_AHB_DATA.B5; end;
function  _getSCK_1 () : uint8_t;     begin Result := GPIO_PORTH_DATA.B0    ; end;
function  _getMISO_1() : uint8_t;     begin Result := GPIO_PORTH_DATA.B2    ; end;
function  _getMOSI_1() : uint8_t;     begin Result := GPIO_PORTH_DATA.B3    ; end;
function  _getPWM_1 () : uint8_t;     begin Result := GPIO_PORTL_AHB_DATA.B0; end;
function  _getINT_1 () : uint8_t;     begin Result := GPIO_PORTF_AHB_DATA.B0; end;
function  _getRX_1  () : uint8_t;     begin Result := GPIO_PORTA_AHB_DATA.B0; end;
function  _getTX_1  () : uint8_t;     begin Result := GPIO_PORTA_AHB_DATA.B1; end;
function  _getSCL_1 () : uint8_t;     begin Result := GPIO_PORTE_DATA.B4    ; end;
function  _getSDA_1 () : uint8_t;     begin Result := GPIO_PORTE_DATA.B5    ; end;
procedure _setAN_1  (state: uint8_t); begin GPIO_PORTD_AHB_DATA.B0 := state;  end;
procedure _setRST_1 (state: uint8_t); begin GPIO_PORTD_AHB_DATA.B4 := state;  end;
procedure _setCS_1  (state: uint8_t); begin GPIO_PORTD_AHB_DATA.B5 := state;  end;
procedure _setSCK_1 (state: uint8_t); begin GPIO_PORTH_DATA.B0     := state;  end;
procedure _setMISO_1(state: uint8_t); begin GPIO_PORTH_DATA.B2     := state;  end;
procedure _setMOSI_1(state: uint8_t); begin GPIO_PORTH_DATA.B3     := state;  end;
procedure _setPWM_1 (state: uint8_t); begin GPIO_PORTL_AHB_DATA.B0 := state;  end;
procedure _setINT_1 (state: uint8_t); begin GPIO_PORTF_AHB_DATA.B0 := state;  end;
procedure _setRX_1  (state: uint8_t); begin GPIO_PORTA_AHB_DATA.B0 := state;  end;
procedure _setTX_1  (state: uint8_t); begin GPIO_PORTA_AHB_DATA.B1 := state;  end;
procedure _setSCL_1 (state: uint8_t); begin GPIO_PORTE_DATA.B4     := state;  end;
procedure _setSDA_1 (state: uint8_t); begin GPIO_PORTE_DATA.B5     := state;  end;
    

function  _getAN_2  () : uint8_t;     begin Result := GPIO_PORTD_AHB_DATA.B1; end;
function  _getRST_2 () : uint8_t;     begin Result := GPIO_PORTC_AHB_DATA.B6; end;
function  _getCS_2  () : uint8_t;     begin Result := GPIO_PORTC_AHB_DATA.B7; end;
function  _getSCK_2 () : uint8_t;     begin Result := GPIO_PORTH_DATA.B0    ; end;
function  _getMISO_2() : uint8_t;     begin Result := GPIO_PORTH_DATA.B2    ; end;
function  _getMOSI_2() : uint8_t;     begin Result := GPIO_PORTH_DATA.B3    ; end;
function  _getPWM_2 () : uint8_t;     begin Result := GPIO_PORTL_AHB_DATA.B1; end;
function  _getINT_2 () : uint8_t;     begin Result := GPIO_PORTF_AHB_DATA.B1; end;
function  _getRX_2  () : uint8_t;     begin Result := GPIO_PORTA_AHB_DATA.B0; end;
function  _getTX_2  () : uint8_t;     begin Result := GPIO_PORTA_AHB_DATA.B1; end;
function  _getSCL_2 () : uint8_t;     begin Result := GPIO_PORTE_DATA.B4    ; end;
function  _getSDA_2 () : uint8_t;     begin Result := GPIO_PORTE_DATA.B5    ; end;
procedure _setAN_2  (state: uint8_t); begin GPIO_PORTD_AHB_DATA.B1 := state;  end;
procedure _setRST_2 (state: uint8_t); begin GPIO_PORTC_AHB_DATA.B6 := state;  end;
procedure _setCS_2  (state: uint8_t); begin GPIO_PORTC_AHB_DATA.B7 := state;  end;
procedure _setSCK_2 (state: uint8_t); begin GPIO_PORTH_DATA.B0     := state;  end;
procedure _setMISO_2(state: uint8_t); begin GPIO_PORTH_DATA.B2     := state;  end;
procedure _setMOSI_2(state: uint8_t); begin GPIO_PORTH_DATA.B3     := state;  end;
procedure _setPWM_2 (state: uint8_t); begin GPIO_PORTL_AHB_DATA.B1 := state;  end;
procedure _setINT_2 (state: uint8_t); begin GPIO_PORTF_AHB_DATA.B1 := state;  end;
procedure _setRX_2  (state: uint8_t); begin GPIO_PORTA_AHB_DATA.B0 := state;  end;
procedure _setTX_2  (state: uint8_t); begin GPIO_PORTA_AHB_DATA.B1 := state;  end;
procedure _setSCL_2 (state: uint8_t); begin GPIO_PORTE_DATA.B4     := state;  end;
procedure _setSDA_2 (state: uint8_t); begin GPIO_PORTE_DATA.B5     := state;  end;

function  _getAN_3  () : uint8_t;     begin Result := GPIO_PORTD_AHB_DATA.B2; end;
function  _getRST_3 () : uint8_t;     begin Result := GPIO_PORTH_DATA.B5    ; end;
function  _getCS_3  () : uint8_t;     begin Result := GPIO_PORTH_DATA.B1    ; end;
function  _getSCK_3 () : uint8_t;     begin Result := GPIO_PORTH_AHB_DATA.B0; end;
function  _getMISO_3() : uint8_t;     begin Result := GPIO_PORTH_AHB_DATA.B2; end;
function  _getMOSI_3() : uint8_t;     begin Result := GPIO_PORTH_AHB_DATA.B3; end;
function  _getPWM_3 () : uint8_t;     begin Result := GPIO_PORTL_AHB_DATA.B2; end;
function  _getINT_3 () : uint8_t;     begin Result := GPIO_PORTF_DATA.B2    ; end;
function  _getRX_3  () : uint8_t;     begin Result := GPIO_PORTA_AHB_DATA.B0; end;
function  _getTX_3  () : uint8_t;     begin Result := GPIO_PORTA_AHB_DATA.B1; end;
function  _getSCL_3 () : uint8_t;     begin Result := GPIO_PORTE_DATA.B4    ; end;
function  _getSDA_3 () : uint8_t;     begin Result := GPIO_PORTE_DATA.B5    ; end;
procedure _setAN_3  (state: uint8_t); begin GPIO_PORTD_AHB_DATA.B2 := state;  end;
procedure _setRST_3 (state: uint8_t); begin GPIO_PORTH_AHB_DATA.B5 := state;  end;
procedure _setCS_3  (state: uint8_t); begin GPIO_PORTH_AHB_DATA.B1 := state;  end;
procedure _setSCK_3 (state: uint8_t); begin GPIO_PORTH_AHB_DATA.B0 := state;  end;
procedure _setMISO_3(state: uint8_t); begin GPIO_PORTH_AHB_DATA.B2 := state;  end;
procedure _setMOSI_3(state: uint8_t); begin GPIO_PORTH_AHB_DATA.B3 := state;  end;
procedure _setPWM_3 (state: uint8_t); begin GPIO_PORTL_AHB_DATA.B2 := state;  end;
procedure _setINT_3 (state: uint8_t); begin GPIO_PORTF_DATA.B2     := state;  end;
procedure _setRX_3  (state: uint8_t); begin GPIO_PORTA_AHB_DATA.B0 := state;  end;
procedure _setTX_3  (state: uint8_t); begin GPIO_PORTA_AHB_DATA.B1 := state;  end;
procedure _setSCL_3 (state: uint8_t); begin GPIO_PORTE_DATA.B4     := state;  end;
procedure _setSDA_3 (state: uint8_t); begin GPIO_PORTE_DATA.B5     := state;  end;

function  _getAN_4  () : uint8_t;     begin Result := GPIO_PORTD_AHB_DATA.B3; end;
function  _getRST_4 () : uint8_t;     begin Result := GPIO_PORTL_AHB_DATA.B4; end;
function  _getCS_4  () : uint8_t;     begin Result := GPIO_PORTL_AHB_DATA.B5; end;
function  _getSCK_4 () : uint8_t;     begin Result := GPIO_PORTH_AHB_DATA.B0; end;
function  _getMISO_4() : uint8_t;     begin Result := GPIO_PORTH_AHB_DATA.B2; end;
function  _getMOSI_4() : uint8_t;     begin Result := GPIO_PORTH_AHB_DATA.B3; end;
function  _getPWM_4 () : uint8_t;     begin Result := GPIO_PORTL_AHB_DATA.B3; end;
function  _getINT_4 () : uint8_t;     begin Result := GPIO_PORTF_DATA.B3    ; end;
function  _getRX_4  () : uint8_t;     begin Result := GPIO_PORTA_AHB_DATA.B0; end;
function  _getTX_4  () : uint8_t;     begin Result := GPIO_PORTA_AHB_DATA.B1; end;
function  _getSCL_4 () : uint8_t;     begin Result := GPIO_PORTE_DATA.B4    ; end;
function  _getSDA_4 () : uint8_t;     begin Result := GPIO_PORTE_DATA.B5    ; end;
procedure _setAN_4  (state: uint8_t); begin GPIO_PORTD_AHB_DATA.B3  := state;  end;
procedure _setRST_4 (state: uint8_t); begin GPIO_PORTL_AHB_DATA.B4  := state;  end;
procedure _setCS_4  (state: uint8_t); begin GPIO_PORTL_AHB_DATA.B5  := state;  end;
procedure _setSCK_4 (state: uint8_t); begin GPIO_PORTH_AHB_DATA.B0  := state;  end;
procedure _setMISO_4(state: uint8_t); begin GPIO_PORTH_AHB_DATA.B2  := state;  end;
procedure _setMOSI_4(state: uint8_t); begin GPIO_PORTH_AHB_DATA.B3  := state;  end;
procedure _setPWM_4 (state: uint8_t); begin GPIO_PORTL_AHB_DATA.B3  := state;  end;
procedure _setINT_4 (state: uint8_t); begin GPIO_PORTF_DATA.B3      := state;  end;
procedure _setRX_4  (state: uint8_t); begin GPIO_PORTA_AHB_DATA.B0  := state;  end;
procedure _setTX_4  (state: uint8_t); begin GPIO_PORTA_AHB_DATA.B1  := state;  end;
procedure _setSCL_4 (state: uint8_t); begin GPIO_PORTE_DATA.B4      := state;  end;
procedure _setSDA_4 (state: uint8_t); begin GPIO_PORTE_DATA.B5      := state;  end;

function _gpioInit_1(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
begin
Result := 0;
    case pin of
        _MIKROBUS_AN_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTD_AHB_DATA   , _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTD_AHB_DATA   , _GPIO_PINMASK_0); end;
        _MIKROBUS_RST_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTD_AHB_DATA   , _GPIO_PINMASK_4) else GPIO_Digital_Output(@GPIO_PORTD_AHB_DATA   , _GPIO_PINMASK_4); end;
        _MIKROBUS_CS_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTD_AHB_DATA   , _GPIO_PINMASK_5) else GPIO_Digital_Output(@GPIO_PORTD_AHB_DATA   , _GPIO_PINMASK_5); end;
        _MIKROBUS_SCK_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_DATA       , _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTH_DATA       , _GPIO_PINMASK_0); end;
        _MIKROBUS_MISO_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_DATA       , _GPIO_PINMASK_2) else GPIO_Digital_Output(@GPIO_PORTH_DATA       , _GPIO_PINMASK_2); end;
        _MIKROBUS_MOSI_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_DATA       , _GPIO_PINMASK_3) else GPIO_Digital_Output(@GPIO_PORTH_DATA       , _GPIO_PINMASK_3); end;
        _MIKROBUS_PWM_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTL_AHB_DATA   , _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTL_AHB_DATA   , _GPIO_PINMASK_0); end;
        _MIKROBUS_INT_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTF_AHB_DATA   , _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTF_AHB_DATA   , _GPIO_PINMASK_0); end;
        _MIKROBUS_RX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTA_AHB_DATA   , _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTA_AHB_DATA   , _GPIO_PINMASK_0); end;
        _MIKROBUS_TX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTA_AHB_DATA   , _GPIO_PINMASK_1) else GPIO_Digital_Output(@GPIO_PORTA_AHB_DATA   , _GPIO_PINMASK_1); end;
        _MIKROBUS_SCL_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTE_DATA       , _GPIO_PINMASK_4) else GPIO_Digital_Output(@GPIO_PORTE_DATA       , _GPIO_PINMASK_4); end;
        _MIKROBUS_SDA_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTE_DATA       , _GPIO_PINMASK_5) else GPIO_Digital_Output(@GPIO_PORTE_DATA       , _GPIO_PINMASK_5); end
    else
        Result := _MIKROBUS_ERR_PIN;
    end;
end;

function _gpioInit_2(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
begin
Result := 0;
    case pin of
        _MIKROBUS_AN_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTD_AHB_DATA, _GPIO_PINMASK_1) else GPIO_Digital_Output(@GPIO_PORTD_AHB_DATA, _GPIO_PINMASK_1); end;
        _MIKROBUS_RST_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTC_AHB_DATA, _GPIO_PINMASK_6) else GPIO_Digital_Output(@GPIO_PORTC_AHB_DATA, _GPIO_PINMASK_6); end;
        _MIKROBUS_CS_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTC_AHB_DATA, _GPIO_PINMASK_7) else GPIO_Digital_Output(@GPIO_PORTC_AHB_DATA, _GPIO_PINMASK_7); end;
        _MIKROBUS_SCK_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_DATA    , _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTH_DATA    , _GPIO_PINMASK_0); end;
        _MIKROBUS_MISO_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_DATA    , _GPIO_PINMASK_2) else GPIO_Digital_Output(@GPIO_PORTH_DATA    , _GPIO_PINMASK_2); end;
        _MIKROBUS_MOSI_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_DATA    , _GPIO_PINMASK_3) else GPIO_Digital_Output(@GPIO_PORTH_DATA    , _GPIO_PINMASK_3); end;
        _MIKROBUS_PWM_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTL_AHB_DATA, _GPIO_PINMASK_1) else GPIO_Digital_Output(@GPIO_PORTL_AHB_DATA, _GPIO_PINMASK_1); end;
        _MIKROBUS_INT_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTF_AHB_DATA, _GPIO_PINMASK_1) else GPIO_Digital_Output(@GPIO_PORTF_AHB_DATA, _GPIO_PINMASK_1); end;
        _MIKROBUS_RX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTA_AHB_DATA, _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTA_AHB_DATA, _GPIO_PINMASK_0); end;
        _MIKROBUS_TX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTA_AHB_DATA, _GPIO_PINMASK_1) else GPIO_Digital_Output(@GPIO_PORTA_AHB_DATA, _GPIO_PINMASK_1); end;
        _MIKROBUS_SCL_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTE_DATA    , _GPIO_PINMASK_4) else GPIO_Digital_Output(@GPIO_PORTE_DATA    , _GPIO_PINMASK_4); end;
        _MIKROBUS_SDA_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTE_DATA    , _GPIO_PINMASK_5) else GPIO_Digital_Output(@GPIO_PORTE_DATA    , _GPIO_PINMASK_5); end
    else
        Result := _MIKROBUS_ERR_PIN;
    end;
end;


function _gpioInit_3(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
begin
Result := 0;
    case pin of
        _MIKROBUS_AN_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTD_AHB_DATA, _GPIO_PINMASK_2) else GPIO_Digital_Output(@GPIO_PORTD_AHB_DATA, _GPIO_PINMASK_2); end;
        _MIKROBUS_RST_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_5) else GPIO_Digital_Output(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_5); end;
        _MIKROBUS_CS_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_1) else GPIO_Digital_Output(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_1); end;
        _MIKROBUS_SCK_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_0); end;
        _MIKROBUS_MISO_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_2) else GPIO_Digital_Output(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_2); end;
        _MIKROBUS_MOSI_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_3) else GPIO_Digital_Output(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_3); end;
        _MIKROBUS_PWM_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTL_AHB_DATA, _GPIO_PINMASK_2) else GPIO_Digital_Output(@GPIO_PORTL_AHB_DATA, _GPIO_PINMASK_2); end;
        _MIKROBUS_INT_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTF_DATA    , _GPIO_PINMASK_2) else GPIO_Digital_Output(@GPIO_PORTF_DATA    , _GPIO_PINMASK_2); end;
        _MIKROBUS_RX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTA_AHB_DATA, _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTA_AHB_DATA, _GPIO_PINMASK_0); end;
        _MIKROBUS_TX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTA_AHB_DATA, _GPIO_PINMASK_1) else GPIO_Digital_Output(@GPIO_PORTA_AHB_DATA, _GPIO_PINMASK_1); end;
        _MIKROBUS_SCL_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTE_DATA    , _GPIO_PINMASK_4) else GPIO_Digital_Output(@GPIO_PORTE_DATA    , _GPIO_PINMASK_4); end;
        _MIKROBUS_SDA_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTE_DATA    , _GPIO_PINMASK_5) else GPIO_Digital_Output(@GPIO_PORTE_DATA    , _GPIO_PINMASK_5); end
    else
        Result := _MIKROBUS_ERR_PIN;
    end;
end;


function _gpioInit_4(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
begin
Result := 0;
    case pin of
        _MIKROBUS_AN_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTD_AHB_DATA, _GPIO_PINMASK_3) else GPIO_Digital_Output(@GPIO_PORTD_AHB_DATA, _GPIO_PINMASK_3); end;
        _MIKROBUS_RST_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTL_AHB_DATA, _GPIO_PINMASK_4) else GPIO_Digital_Output(@GPIO_PORTL_AHB_DATA, _GPIO_PINMASK_4); end;
        _MIKROBUS_CS_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTL_AHB_DATA, _GPIO_PINMASK_5) else GPIO_Digital_Output(@GPIO_PORTL_AHB_DATA, _GPIO_PINMASK_5); end;
        _MIKROBUS_SCK_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_0); end;
        _MIKROBUS_MISO_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_2) else GPIO_Digital_Output(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_2); end;
        _MIKROBUS_MOSI_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_3) else GPIO_Digital_Output(@GPIO_PORTH_AHB_DATA, _GPIO_PINMASK_3); end;
        _MIKROBUS_PWM_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTL_AHB_DATA, _GPIO_PINMASK_3) else GPIO_Digital_Output(@GPIO_PORTL_AHB_DATA, _GPIO_PINMASK_3); end;
        _MIKROBUS_INT_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTF_DATA    , _GPIO_PINMASK_3) else GPIO_Digital_Output(@GPIO_PORTF_DATA    , _GPIO_PINMASK_3); end;
        _MIKROBUS_RX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTA_AHB_DATA, _GPIO_PINMASK_0) else GPIO_Digital_Output(@GPIO_PORTA_AHB_DATA, _GPIO_PINMASK_0); end;
        _MIKROBUS_TX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTA_AHB_DATA, _GPIO_PINMASK_1) else GPIO_Digital_Output(@GPIO_PORTA_AHB_DATA, _GPIO_PINMASK_1); end;
        _MIKROBUS_SCL_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTE_DATA    , _GPIO_PINMASK_4) else GPIO_Digital_Output(@GPIO_PORTE_DATA    , _GPIO_PINMASK_4); end;
        _MIKROBUS_SDA_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORTE_DATA    , _GPIO_PINMASK_5) else GPIO_Digital_Output(@GPIO_PORTE_DATA    , _GPIO_PINMASK_5); end
    else
        Result := _MIKROBUS_ERR_PIN;
    end;
end;
end.