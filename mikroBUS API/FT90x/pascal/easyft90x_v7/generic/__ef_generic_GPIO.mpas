unit __ef_generic_GPIO;
uses __t_FT90x;

function  _getAN_1  () : uint8_t;
function  _getRST_1 () : uint8_t;
function  _getCS_1  () : uint8_t;
function  _getSCK_1 () : uint8_t;
function  _getMISO_1() : uint8_t;
function  _getMOSI_1() : uint8_t;
function  _getPWM_1 () : uint8_t;
function  _getINT_1 () : uint8_t;
function  _getRX_1  () : uint8_t;
function  _getTX_1  () : uint8_t;
function  _getSCL_1 () : uint8_t;
function  _getSDA_1 () : uint8_t;
procedure _setAN_1  (state: uint8_t);
procedure _setRST_1 (state: uint8_t);
procedure _setCS_1  (state: uint8_t);
procedure _setSCK_1 (state: uint8_t);
procedure _setMISO_1(state: uint8_t);
procedure _setMOSI_1(state: uint8_t);
procedure _setPWM_1 (state: uint8_t);
procedure _setINT_1 (state: uint8_t);
procedure _setRX_1  (state: uint8_t);
procedure _setTX_1  (state: uint8_t);
procedure _setSCL_1 (state: uint8_t);
procedure _setSDA_1 (state: uint8_t);

function  _getAN_2  () : uint8_t;    
function  _getRST_2 () : uint8_t;    
function  _getCS_2  () : uint8_t;    
function  _getSCK_2 () : uint8_t;    
function  _getMISO_2() : uint8_t;    
function  _getMOSI_2() : uint8_t;    
function  _getPWM_2 () : uint8_t;    
function  _getINT_2 () : uint8_t;    
function  _getRX_2  () : uint8_t;    
function  _getTX_2  () : uint8_t;    
function  _getSCL_2 () : uint8_t;    
function  _getSDA_2 () : uint8_t;    
procedure _setAN_2  (state: uint8_t);
procedure _setRST_2 (state: uint8_t);
procedure _setCS_2  (state: uint8_t);
procedure _setSCK_2 (state: uint8_t);
procedure _setMISO_2(state: uint8_t);
procedure _setMOSI_2(state: uint8_t);
procedure _setPWM_2 (state: uint8_t);
procedure _setINT_2 (state: uint8_t);
procedure _setRX_2  (state: uint8_t);
procedure _setTX_2  (state: uint8_t);
procedure _setSCL_2 (state: uint8_t);
procedure _setSDA_2 (state: uint8_t);

function _gpioInit_1(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
function _gpioInit_2(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;

implementation

const _MIKROBUS_ERR_PIN  : byte = 1;                

const _GPIO_INPUT        : byte = 0;
const _GPIO_OUTPUT       : byte = 1;

const _MIKROBUS_AN_PIN   : byte = 0;
const _MIKROBUS_RST_PIN  : byte = 1;
const _MIKROBUS_CS_PIN   : byte = 2;
const _MIKROBUS_SCK_PIN  : byte = 3;
const _MIKROBUS_MISO_PIN : byte = 4;
const _MIKROBUS_MOSI_PIN : byte = 5;
const _MIKROBUS_PWM_PIN  : byte = 6;
const _MIKROBUS_INT_PIN  : byte = 7;
const _MIKROBUS_RX_PIN   : byte = 8;
const _MIKROBUS_TX_PIN   : byte = 9;
const _MIKROBUS_SCL_PIN  : byte = 10;
const _MIKROBUS_SDA_PIN  : byte = 11;

// ----------------------------------------------------------- SYSTEM SPECIFIC /

function  _getAN_1  () : uint8_t;     begin Result := GPIO_PIN9_bit ; end;
function  _getRST_1 () : uint8_t;     begin Result := GPIO_PIN1_bit ; end;
function  _getCS_1  () : uint8_t;     begin Result := GPIO_PIN28_bit; end;
function  _getSCK_1 () : uint8_t;     begin Result := GPIO_PIN27_bit; end;
function  _getMISO_1() : uint8_t;     begin Result := GPIO_PIN30_bit; end;
function  _getMOSI_1() : uint8_t;     begin Result := GPIO_PIN29_bit; end;
function  _getPWM_1 () : uint8_t;     begin Result := GPIO_PIN56_bit; end;
function  _getINT_1 () : uint8_t;     begin Result := GPIO_PIN3_bit ; end;
function  _getRX_1  () : uint8_t;     begin Result := GPIO_PIN53_bit; end;
function  _getTX_1  () : uint8_t;     begin Result := GPIO_PIN52_bit; end;
function  _getSCL_1 () : uint8_t;     begin Result := GPIO_PIN44_bit; end;
function  _getSDA_1 () : uint8_t;     begin Result := GPIO_PIN45_bit; end;
procedure _setAN_1  (state: uint8_t); begin GPIO_PIN9_bit  := state;  end;
procedure _setRST_1 (state: uint8_t); begin GPIO_PIN1_bit  := state;  end;
procedure _setCS_1  (state: uint8_t); begin GPIO_PIN28_bit := state;  end;
procedure _setSCK_1 (state: uint8_t); begin GPIO_PIN27_bit := state;  end;
procedure _setMISO_1(state: uint8_t); begin GPIO_PIN30_bit := state;  end;
procedure _setMOSI_1(state: uint8_t); begin GPIO_PIN29_bit := state;  end;
procedure _setPWM_1 (state: uint8_t); begin GPIO_PIN56_bit := state;  end;
procedure _setINT_1 (state: uint8_t); begin GPIO_PIN3_bit  := state;  end;
procedure _setRX_1  (state: uint8_t); begin GPIO_PIN53_bit := state;  end;
procedure _setTX_1  (state: uint8_t); begin GPIO_PIN52_bit := state;  end;
procedure _setSCL_1 (state: uint8_t); begin GPIO_PIN44_bit := state;  end;
procedure _setSDA_1 (state: uint8_t); begin GPIO_PIN45_bit := state;  end;

function  _getAN_2  () : uint8_t;     begin Result := GPIO_PIN54_bit; end;
function  _getRST_2 () : uint8_t;     begin Result := GPIO_PIN4_bit ; end;
function  _getCS_2  () : uint8_t;     begin Result := GPIO_PIN61_bit; end;
function  _getSCK_2 () : uint8_t;     begin Result := GPIO_PIN27_bit; end;
function  _getMISO_2() : uint8_t;     begin Result := GPIO_PIN30_bit; end;
function  _getMOSI_2() : uint8_t;     begin Result := GPIO_PIN29_bit; end;
function  _getPWM_2 () : uint8_t;     begin Result := GPIO_PIN57_bit; end;
function  _getINT_2 () : uint8_t;     begin Result := GPIO_PIN5_bit ; end;
function  _getRX_2  () : uint8_t;     begin Result := GPIO_PIN53_bit; end;
function  _getTX_2  () : uint8_t;     begin Result := GPIO_PIN52_bit; end;
function  _getSCL_2 () : uint8_t;     begin Result := GPIO_PIN44_bit; end;
function  _getSDA_2 () : uint8_t;     begin Result := GPIO_PIN45_bit; end;
procedure _setAN_2  (state: uint8_t); begin GPIO_PIN54_bit := state;  end;
procedure _setRST_2 (state: uint8_t); begin GPIO_PIN4_bit  := state;  end;
procedure _setCS_2  (state: uint8_t); begin GPIO_PIN61_bit := state;  end;
procedure _setSCK_2 (state: uint8_t); begin GPIO_PIN27_bit := state;  end;
procedure _setMISO_2(state: uint8_t); begin GPIO_PIN30_bit := state;  end;
procedure _setMOSI_2(state: uint8_t); begin GPIO_PIN29_bit := state;  end;
procedure _setPWM_2 (state: uint8_t); begin GPIO_PIN57_bit := state;  end;
procedure _setINT_2 (state: uint8_t); begin GPIO_PIN5_bit  := state;  end;
procedure _setRX_2  (state: uint8_t); begin GPIO_PIN53_bit := state;  end;
procedure _setTX_2  (state: uint8_t); begin GPIO_PIN52_bit := state;  end;
procedure _setSCL_2 (state: uint8_t); begin GPIO_PIN44_bit := state;  end;
procedure _setSDA_2 (state: uint8_t); begin GPIO_PIN45_bit := state;  end;

function _gpioInit_1(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
begin
    Result := 0;
    case pin of
        _MIKROBUS_AN_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_08_15, _GPIO_PINMASK_1 ) else GPIO_Digital_Output(@GPIO_PORT_08_15, _GPIO_PINMASK_1 ); end;
        _MIKROBUS_RST_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_00_07, _GPIO_PINMASK_1 ) else GPIO_Digital_Output(@GPIO_PORT_00_07, _GPIO_PINMASK_1 ); end;
        _MIKROBUS_CS_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_24_31, _GPIO_PINMASK_4 ) else GPIO_Digital_Output(@GPIO_PORT_24_31, _GPIO_PINMASK_4 ); end;
        _MIKROBUS_SCK_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_24_31, _GPIO_PINMASK_3 ) else GPIO_Digital_Output(@GPIO_PORT_24_31, _GPIO_PINMASK_3 ); end;
        _MIKROBUS_MISO_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_24_31, _GPIO_PINMASK_6 ) else GPIO_Digital_Output(@GPIO_PORT_24_31, _GPIO_PINMASK_6 ); end;
        _MIKROBUS_MOSI_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_24_31, _GPIO_PINMASK_5 ) else GPIO_Digital_Output(@GPIO_PORT_24_31, _GPIO_PINMASK_5 ); end;
        _MIKROBUS_PWM_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_56_63, _GPIO_PINMASK_0 ) else GPIO_Digital_Output(@GPIO_PORT_56_63, _GPIO_PINMASK_0 ); end;
        _MIKROBUS_INT_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_00_07, _GPIO_PINMASK_3 ) else GPIO_Digital_Output(@GPIO_PORT_00_07, _GPIO_PINMASK_3 ); end;
        _MIKROBUS_RX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_48_55, _GPIO_PINMASK_5 ) else GPIO_Digital_Output(@GPIO_PORT_48_55, _GPIO_PINMASK_5 ); end;
        _MIKROBUS_TX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_48_55, _GPIO_PINMASK_4 ) else GPIO_Digital_Output(@GPIO_PORT_48_55, _GPIO_PINMASK_4 ); end;
        _MIKROBUS_SCL_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_40_47, _GPIO_PINMASK_4 ) else GPIO_Digital_Output(@GPIO_PORT_40_47, _GPIO_PINMASK_4 ); end;
        _MIKROBUS_SDA_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_40_47, _GPIO_PINMASK_5 ) else GPIO_Digital_Output(@GPIO_PORT_40_47, _GPIO_PINMASK_5 ); end
    else
        Result := _MIKROBUS_ERR_PIN;
    end;
end;

function _gpioInit_2(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
begin
    Result := 0;
    case pin of
        _MIKROBUS_AN_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_48_55, _GPIO_PINMASK_6 ) else GPIO_Digital_Output(@GPIO_PORT_48_55, _GPIO_PINMASK_6 ); end;
        _MIKROBUS_RST_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_00_07, _GPIO_PINMASK_4 ) else GPIO_Digital_Output(@GPIO_PORT_00_07, _GPIO_PINMASK_4 ); end;
        _MIKROBUS_CS_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_56_63, _GPIO_PINMASK_5 ) else GPIO_Digital_Output(@GPIO_PORT_56_63, _GPIO_PINMASK_5 ); end;
        _MIKROBUS_SCK_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_24_31, _GPIO_PINMASK_3 ) else GPIO_Digital_Output(@GPIO_PORT_24_31, _GPIO_PINMASK_3 ); end;
        _MIKROBUS_MISO_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_24_31, _GPIO_PINMASK_6 ) else GPIO_Digital_Output(@GPIO_PORT_24_31, _GPIO_PINMASK_6 ); end;
        _MIKROBUS_MOSI_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_24_31, _GPIO_PINMASK_5 ) else GPIO_Digital_Output(@GPIO_PORT_24_31, _GPIO_PINMASK_5 ); end;
        _MIKROBUS_PWM_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_56_63, _GPIO_PINMASK_1 ) else GPIO_Digital_Output(@GPIO_PORT_56_63, _GPIO_PINMASK_1 ); end;
        _MIKROBUS_INT_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_00_07, _GPIO_PINMASK_5 ) else GPIO_Digital_Output(@GPIO_PORT_00_07, _GPIO_PINMASK_5 ); end;
        _MIKROBUS_RX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_48_55, _GPIO_PINMASK_5 ) else GPIO_Digital_Output(@GPIO_PORT_48_55, _GPIO_PINMASK_5 ); end;
        _MIKROBUS_TX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_48_55, _GPIO_PINMASK_4 ) else GPIO_Digital_Output(@GPIO_PORT_48_55, _GPIO_PINMASK_4 ); end;
        _MIKROBUS_SCL_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_40_47, _GPIO_PINMASK_4 ) else GPIO_Digital_Output(@GPIO_PORT_40_47, _GPIO_PINMASK_4 ); end;
        _MIKROBUS_SDA_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@GPIO_PORT_40_47, _GPIO_PINMASK_5 ) else GPIO_Digital_Output(@GPIO_PORT_40_47, _GPIO_PINMASK_5 ); end
    else
        Result := _MIKROBUS_ERR_PIN;
    end;
end;

end.