module __c2_PIC18FK_GPIO
include __t_PIC 

sub function _getAN_1  () as uint8_t
sub function _getRST_1 () as uint8_t
sub function _getCS_1  () as uint8_t
sub function _getSCK_1 () as uint8_t
sub function _getMISO_1() as uint8_t
sub function _getMOSI_1() as uint8_t
sub function _getPWM_1 () as uint8_t
sub function _getINT_1 () as uint8_t
sub function _getRX_1  () as uint8_t
sub function _getTX_1  () as uint8_t
sub function _getSCL_1 () as uint8_t
sub function _getSDA_1 () as uint8_t
sub procedure _setAN_1  (dim state as uint8_t)
sub procedure _setRST_1 (dim state as uint8_t)
sub procedure _setCS_1  (dim state as uint8_t)
sub procedure _setSCK_1 (dim state as uint8_t)
sub procedure _setMISO_1(dim state as uint8_t)
sub procedure _setMOSI_1(dim state as uint8_t)
sub procedure _setPWM_1 (dim state as uint8_t)
sub procedure _setINT_1 (dim state as uint8_t)
sub procedure _setRX_1  (dim state as uint8_t)
sub procedure _setTX_1  (dim state as uint8_t)
sub procedure _setSCL_1 (dim state as uint8_t)
sub procedure _setSDA_1 (dim state as uint8_t)

sub function _getAN_2  () as uint8_t
sub function _getRST_2 () as uint8_t
sub function _getCS_2  () as uint8_t
sub function _getSCK_2 () as uint8_t
sub function _getMISO_2() as uint8_t
sub function _getMOSI_2() as uint8_t
sub function _getPWM_2 () as uint8_t
sub function _getINT_2 () as uint8_t
sub function _getRX_2  () as uint8_t
sub function _getTX_2  () as uint8_t
sub function _getSCL_2 () as uint8_t
sub function _getSDA_2 () as uint8_t
sub procedure _setAN_2  (dim state as uint8_t)
sub procedure _setRST_2 (dim state as uint8_t)
sub procedure _setCS_2  (dim state as uint8_t)
sub procedure _setSCK_2 (dim state as uint8_t)
sub procedure _setMISO_2(dim state as uint8_t)
sub procedure _setMOSI_2(dim state as uint8_t)
sub procedure _setPWM_2 (dim state as uint8_t)
sub procedure _setINT_2 (dim state as uint8_t)
sub procedure _setRX_2  (dim state as uint8_t)
sub procedure _setTX_2  (dim state as uint8_t)
sub procedure _setSCL_2 (dim state as uint8_t)
sub procedure _setSDA_2 (dim state as uint8_t)

sub function _gpioInit_1(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret
sub function _gpioInit_2(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret

implements

const _MIKROBUS_ERR_PIN          as byte = 2

const _GPIO_INPUT                as byte = 1
const _GPIO_OUTPUT               as byte = 0

const _MIKROBUS_AN_PIN           as byte = 0
const _MIKROBUS_RST_PIN          as byte = 1
const _MIKROBUS_CS_PIN           as byte = 2
const _MIKROBUS_SCK_PIN          as byte = 3
const _MIKROBUS_MISO_PIN         as byte = 4
const _MIKROBUS_MOSI_PIN         as byte = 5
const _MIKROBUS_PWM_PIN          as byte = 6
const _MIKROBUS_INT_PIN          as byte = 7
const _MIKROBUS_RX_PIN           as byte = 8
const _MIKROBUS_TX_PIN           as byte = 9
const _MIKROBUS_SCL_PIN          as byte = 10
const _MIKROBUS_SDA_PIN          as byte = 11


sub function _getAN_1  () as uint8_t Result = PORTA.B0 end sub
sub function _getRST_1 () as uint8_t Result = PORTG.B3 end sub
sub function _getCS_1  () as uint8_t Result = PORTD.B0 end sub
sub function _getSCK_1 () as uint8_t Result = PORTC.B3 end sub
sub function _getMISO_1() as uint8_t Result = PORTC.B4 end sub
sub function _getMOSI_1() as uint8_t Result = PORTC.B5 end sub
sub function _getPWM_1 () as uint8_t Result = PORTC.B2 end sub
sub function _getINT_1 () as uint8_t Result = PORTB.B2 end sub
sub function _getRX_1  () as uint8_t Result = PORTG.B2 end sub
sub function _getTX_1  () as uint8_t Result = PORTG.B7 end sub
sub function _getSCL_1 () as uint8_t Result = PORTD.B6 end sub
sub function _getSDA_1 () as uint8_t Result = PORTD.B5 end sub
sub procedure _setAN_1  (dim state as uint8_t) LATA0_bit = state end sub
sub procedure _setRST_1 (dim state as uint8_t) LATG3_bit = state end sub
sub procedure _setCS_1  (dim state as uint8_t) LATD0_bit = state end sub
sub procedure _setSCK_1 (dim state as uint8_t) LATC3_bit = state end sub
sub procedure _setMISO_1(dim state as uint8_t) LATC4_bit = state end sub
sub procedure _setMOSI_1(dim state as uint8_t) LATC5_bit = state end sub
sub procedure _setPWM_1 (dim state as uint8_t) LATC2_bit = state end sub
sub procedure _setINT_1 (dim state as uint8_t) LATB2_bit = state end sub
sub procedure _setRX_1  (dim state as uint8_t) LATG2_bit = state end sub
sub procedure _setTX_1  (dim state as uint8_t) LATG7_bit = state end sub
sub procedure _setSCL_1 (dim state as uint8_t) LATD6_bit = state end sub
sub procedure _setSDA_1 (dim state as uint8_t) LATD5_bit = state end sub

sub function _getAN_2  () as uint8_t Result = PORTA.B1  end sub
sub function _getRST_2 () as uint8_t Result = PORTG.B4  end sub
sub function _getCS_2  () as uint8_t Result = PORTH.B2  end sub
sub function _getSCK_2 () as uint8_t Result = PORTC.B3  end sub
sub function _getMISO_2() as uint8_t Result = PORTC.B4  end sub
sub function _getMOSI_2() as uint8_t Result = PORTC.B5  end sub
sub function _getPWM_2 () as uint8_t Result = PORTC.B6  end sub
sub function _getINT_2 () as uint8_t Result = PORTB.B3  end sub
sub function _getRX_2  () as uint8_t Result = PORTB.B5  end sub
sub function _getTX_2  () as uint8_t Result = PORTB.B4  end sub
sub function _getSCL_2 () as uint8_t Result = PORTD.B6  end sub
sub function _getSDA_2 () as uint8_t Result = PORTD.B5  end sub
sub procedure _setAN_2  (dim state as uint8_t) LATA1_bit  = state end sub
sub procedure _setRST_2 (dim state as uint8_t) LATG4_bit  = state end sub
sub procedure _setCS_2  (dim state as uint8_t) LATH2_bit  = state end sub
sub procedure _setSCK_2 (dim state as uint8_t) LATC3_bit  = state end sub
sub procedure _setMISO_2(dim state as uint8_t) LATC4_bit  = state end sub
sub procedure _setMOSI_2(dim state as uint8_t) LATC5_bit  = state end sub
sub procedure _setPWM_2 (dim state as uint8_t) LATC6_bit  = state end sub
sub procedure _setINT_2 (dim state as uint8_t) LATB3_bit  = state end sub
sub procedure _setRX_2  (dim state as uint8_t) LATB5_bit  = state end sub
sub procedure _setTX_2  (dim state as uint8_t) LATB4_bit  = state end sub
sub procedure _setSCL_2 (dim state as uint8_t) LATD6_bit  = state end sub
sub procedure _setSDA_2 (dim state as uint8_t) LATD5_bit  = state end sub


sub function _gpioInit_1(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret

Result = 0
    select case pin
                case _MIKROBUS_AN_PIN    TRISA0_bit  = direction ANSELA0_bit = 0
                case _MIKROBUS_RST_PIN   TRISG3_bit  = direction ANSELG3_bit = 0
                case _MIKROBUS_CS_PIN    TRISD0_bit  = direction ANSELD0_bit = 0
                case _MIKROBUS_SCK_PIN   TRISC3_bit  = direction 
                case _MIKROBUS_MISO_PIN  TRISC4_bit  = direction 
                case _MIKROBUS_MOSI_PIN  TRISC5_bit  = direction 
                case _MIKROBUS_PWM_PIN   TRISC2_bit  = direction 
                case _MIKROBUS_INT_PIN   TRISB2_bit  = direction ANSELB2_bit = 0
                case _MIKROBUS_RX_PIN    TRISG2_bit  = direction ANSELG2_bit = 0
                case _MIKROBUS_TX_PIN    TRISG7_bit  = direction ANSELG7_bit = 0
                case _MIKROBUS_SCL_PIN   TRISD6_bit  = direction ANSELD6_bit = 0
                case _MIKROBUS_SDA_PIN   TRISD5_bit  = direction ANSELD5_bit = 0
        case else Result = _MIKROBUS_ERR_PIN
    end select
end sub

sub function _gpioInit_2(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret

Result = 0
    select case pin
                case _MIKROBUS_AN_PIN    TRISA1_bit  = direction ANSELA1_bit = 0
                case _MIKROBUS_RST_PIN   TRISG4_bit  = direction ANSELG4_bit = 0
                case _MIKROBUS_CS_PIN    TRISH2_bit  = direction 
                case _MIKROBUS_SCK_PIN   TRISC3_bit  = direction 
                case _MIKROBUS_MISO_PIN  TRISC4_bit  = direction 
                case _MIKROBUS_MOSI_PIN  TRISC5_bit  = direction 
                case _MIKROBUS_PWM_PIN   TRISC6_bit  = direction 
                case _MIKROBUS_INT_PIN   TRISB3_bit  = direction ANSELB3_bit = 0
                case _MIKROBUS_RX_PIN    TRISB5_bit  = direction ANSELB5_bit = 0
                case _MIKROBUS_TX_PIN    TRISB4_bit  = direction ANSELB4_bit = 0
                case _MIKROBUS_SCL_PIN   TRISD6_bit  = direction ANSELD6_bit = 0
                case _MIKROBUS_SDA_PIN   TRISD5_bit  = direction ANSELD5_bit = 0
        case else Result = _MIKROBUS_ERR_PIN
    end select
end sub

end.