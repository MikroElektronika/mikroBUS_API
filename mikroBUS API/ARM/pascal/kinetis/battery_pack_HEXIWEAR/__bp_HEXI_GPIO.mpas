unit __bp_HEXI_GPIO;
uses __t_KINETIS;

function  _getAN_1  () : uint8_t;
function  _getRST_1 () : uint8_t;
function  _getCS_1  () : uint8_t;
function  _getSCK_1 () : uint8_t;
function  _getMISO_1() : uint8_t;
function  _getMOSI_1() : uint8_t;
function  _getPWM_1 () : uint8_t;
function  _getINT_1 () : uint8_t;
function  _getRX_1  () : uint8_t;
function  _getTX_1  () : uint8_t;
function  _getSCL_1 () : uint8_t;
function  _getSDA_1 () : uint8_t;
procedure _setAN_1  (state: uint8_t);
procedure _setRST_1 (state: uint8_t);
procedure _setCS_1  (state: uint8_t);
procedure _setSCK_1 (state: uint8_t);
procedure _setMISO_1(state: uint8_t);
procedure _setMOSI_1(state: uint8_t);
procedure _setPWM_1 (state: uint8_t);
procedure _setINT_1 (state: uint8_t);
procedure _setRX_1  (state: uint8_t);
procedure _setTX_1  (state: uint8_t);
procedure _setSCL_1 (state: uint8_t);
procedure _setSDA_1 (state: uint8_t);

function _gpioInit_1(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;

implementation

const _MIKROBUS_ERR_PIN  : byte = 1;                

const _GPIO_INPUT        : byte = 0;
const _GPIO_OUTPUT       : byte = 1;

const _MIKROBUS_AN_PIN   : byte = 0;
const _MIKROBUS_RST_PIN  : byte = 1;
const _MIKROBUS_CS_PIN   : byte = 2;
const _MIKROBUS_SCK_PIN  : byte = 3;
const _MIKROBUS_MISO_PIN : byte = 4;
const _MIKROBUS_MOSI_PIN : byte = 5;
const _MIKROBUS_PWM_PIN  : byte = 6;
const _MIKROBUS_INT_PIN  : byte = 7;
const _MIKROBUS_RX_PIN   : byte = 8;
const _MIKROBUS_TX_PIN   : byte = 9;
const _MIKROBUS_SCL_PIN  : byte = 10;
const _MIKROBUS_SDA_PIN  : byte = 11;

// ----------------------------------------------------------- SYSTEM SPECIFIC /

function  _getAN_1  () : uint8_t;     begin Result := PTB_PDIR.B2 ; end;
function  _getRST_1 () : uint8_t;     begin Result := PTB_PDIR.B11; end;
function  _getCS_1  () : uint8_t;     begin Result := PTC_PDIR.B4 ; end;
function  _getSCK_1 () : uint8_t;     begin Result := PTC_PDIR.B5 ; end;
function  _getMISO_1() : uint8_t;     begin Result := PTC_PDIR.B7 ; end;
function  _getMOSI_1() : uint8_t;     begin Result := PTC_PDIR.B6 ; end;
function  _getPWM_1 () : uint8_t;     begin Result := PTA_PDIR.B10; end;
function  _getINT_1 () : uint8_t;     begin Result := PTB_PDIR.B13; end;
function  _getRX_1  () : uint8_t;     begin Result := PTD_PDIR.B2 ; end;
function  _getTX_1  () : uint8_t;     begin Result := PTD_PDIR.B3 ; end;
function  _getSCL_1 () : uint8_t;     begin Result := PTD_PDIR.B8 ; end;
function  _getSDA_1 () : uint8_t;     begin Result := PTD_PDIR.B9 ; end;
procedure _setAN_1  (state: uint8_t); begin PTB_PDOR.B2  := state; end;
procedure _setRST_1 (state: uint8_t); begin PTB_PDOR.B11 := state; end;
procedure _setCS_1  (state: uint8_t); begin PTC_PDOR.B4  := state; end;
procedure _setSCK_1 (state: uint8_t); begin PTC_PDOR.B5  := state; end;
procedure _setMISO_1(state: uint8_t); begin PTC_PDOR.B7  := state; end;
procedure _setMOSI_1(state: uint8_t); begin PTC_PDOR.B6  := state; end;
procedure _setPWM_1 (state: uint8_t); begin PTA_PDOR.B10 := state; end;
procedure _setINT_1 (state: uint8_t); begin PTB_PDOR.B13 := state; end;
procedure _setRX_1  (state: uint8_t); begin PTD_PDOR.B2  := state; end;
procedure _setTX_1  (state: uint8_t); begin PTD_PDOR.B3  := state; end;
procedure _setSCL_1 (state: uint8_t); begin PTD_PDOR.B8  := state; end;
procedure _setSDA_1 (state: uint8_t); begin PTD_PDOR.B9  := state; end;

function _gpioInit_1(pin: T_mikrobus_pin; direction: T_gpio_dir) : T_mikrobus_ret;
begin
Result := 0;
    case pin of
        _MIKROBUS_AN_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@PTB_PDIR, _GPIO_PINMASK_2 ) else GPIO_Digital_Output(@PTB_PDOR, _GPIO_PINMASK_2 ); end;
        _MIKROBUS_RST_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@PTB_PDIR, _GPIO_PINMASK_11) else GPIO_Digital_Output(@PTB_PDOR, _GPIO_PINMASK_11); end;
        _MIKROBUS_CS_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_4 ) else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_4 ); end;
        _MIKROBUS_SCK_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_5 ) else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_5 ); end;
        _MIKROBUS_MISO_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_7 ) else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_7 ); end;
        _MIKROBUS_MOSI_PIN  : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_6 ) else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_6 ); end;
        _MIKROBUS_PWM_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@PTA_PDIR, _GPIO_PINMASK_10) else GPIO_Digital_Output(@PTA_PDOR, _GPIO_PINMASK_10); end;
        _MIKROBUS_INT_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@PTB_PDIR, _GPIO_PINMASK_13) else GPIO_Digital_Output(@PTB_PDOR, _GPIO_PINMASK_13); end;
        _MIKROBUS_RX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@PTD_PDIR, _GPIO_PINMASK_2 ) else GPIO_Digital_Output(@PTD_PDOR, _GPIO_PINMASK_2 ); end;
        _MIKROBUS_TX_PIN    : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@PTD_PDIR, _GPIO_PINMASK_3 ) else GPIO_Digital_Output(@PTD_PDOR, _GPIO_PINMASK_3 ); end;
        _MIKROBUS_SCL_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@PTD_PDIR, _GPIO_PINMASK_8 ) else GPIO_Digital_Output(@PTD_PDOR, _GPIO_PINMASK_8 ); end;
        _MIKROBUS_SDA_PIN   : begin if direction = _GPIO_INPUT then GPIO_Digital_Input(@PTD_PDIR, _GPIO_PINMASK_9 ) else GPIO_Digital_Output(@PTD_PDOR, _GPIO_PINMASK_9 ); end
    else
        Result := _MIKROBUS_ERR_PIN;
    end;
end;
end.