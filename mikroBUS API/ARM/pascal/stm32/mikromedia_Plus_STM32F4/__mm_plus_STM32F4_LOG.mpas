unit __mm_plus_STM32F4_LOG;
uses __t_STM32;

{$IFDEF ENABLE_LOG}
function _log_init1(baud: uint32_t) : T_mikrobus_ret;
function _log_init2(baud: uint32_t) : T_mikrobus_ret;
function _log_init3(baud: uint32_t) : T_mikrobus_ret;
function _log_init4(baud: uint32_t) : T_mikrobus_ret;
function _log_initUart(baud: uint32_t) : T_mikrobus_ret;
    
procedure _log_write(data_: ^uint8_t);
{$ENDIF}

implementation

// ----------------------------------------------------------- SYSTEM SPECIFIC /

{$IFDEF ENABLE_LOG}

var logger : ^T_log_writeFp;

function _log_init1(baud: uint32_t) : T_mikrobus_ret;
begin
Result := 0;
    UART2_Init_Advanced(baud, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, @_GPIO_MODULE_USART2_PD5_PA3 );
    logger := @UART2_Write;
end;

function _log_init2(baud: uint32_t) : T_mikrobus_ret;
begin
Result := 0;
    UART2_Init_Advanced(baud, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, @_GPIO_MODULE_USART2_PD5_PA3 );
    logger := @UART2_Write;
end;

function _log_init3(baud: uint32_t) : T_mikrobus_ret;
begin
Result := 0;
    UART2_Init_Advanced(baud, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, @_GPIO_MODULE_USART2_PD5_PA3 );
    logger := @UART2_Write;
end;


function _log_init4(baud: uint32_t) : T_mikrobus_ret;
begin
Result := 0;
    UART2_Init_Advanced(baud, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, @_GPIO_MODULE_USART2_PD5_PA3 );
    logger := @UART2_Write;
end;

function _log_initUart(baud: uint32_t) : T_mikrobus_ret;
begin
Result := 0;
    UART6_Init_Advanced(baud, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, @_GPIO_MODULE_USART6_PC67 );
    logger := @UART6_Write;
end;

procedure _log_write(data_: ^uint8_t);
begin
    logger( data_^ );
end;

{$ENDIF}

end.