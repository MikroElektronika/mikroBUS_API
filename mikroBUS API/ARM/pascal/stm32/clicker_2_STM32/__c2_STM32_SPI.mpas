unit __c2_STM32_SPI;
uses __t_STM32;

{$IFDEF ENABLE_SPI}
function _spiInit_1(cfg: ^const uint32_t) : T_mikrobus_ret;
function _spiInit_2(cfg: ^const uint32_t) : T_mikrobus_ret;
function _spiInit_3(cfg: ^const uint32_t) : T_mikrobus_ret;
function _spiInit_4(cfg: ^const uint32_t) : T_mikrobus_ret;

{$ENDIF}

implementation

const _MIKROBUS_ERR_SPI  : byte = 3;

// ----------------------------------------------------------- SYSTEM SPECIFIC /

{$IFDEF ENABLE_SPI}

function _spiInit_1(cfg: ^const uint32_t) : T_mikrobus_ret;
var arg1, arg2 : ^const uint32_t;
begin
Result := 0;
    arg1 := (cfg + 0);
    arg2 := (cfg + 1);
    SPI3_Init_Advanced( byte(arg1^), dword(arg2^), @_GPIO_MODULE_SPI3_PC10_11_12 );
end;

function _spiInit_2(cfg: ^const uint32_t) : T_mikrobus_ret;
var arg1, arg2 : ^const uint32_t;
begin
Result := 0;
    arg1 := (cfg + 0);
    arg2 := (cfg + 1);
    SPI2_Init_Advanced( byte(arg1^), dword(arg2^), @_GPIO_MODULE_SPI2_PB13_14_15 );
end;

function _spiInit_3(cfg: ^const uint32_t) : T_mikrobus_ret;
var arg1, arg2 : ^const uint32_t;
begin
Result := 0;
    arg1 := (cfg + 0);
    arg2 := (cfg + 1);
    SPI2_Init_Advanced( byte(arg1^), dword(arg2^), @_GPIO_MODULE_SPI2_PB13_14_15 );
end;

function _spiInit_4(cfg: ^const uint32_t) : T_mikrobus_ret;
var arg1, arg2 : ^const uint32_t;
begin
Result := 0;
    arg1 := (cfg + 0);
    arg2 := (cfg + 1);
    SPI2_Init_Advanced( byte(arg1^), dword(arg2^), @_GPIO_MODULE_SPI2_PB13_14_15 );
end;

{$ENDIF}

end.