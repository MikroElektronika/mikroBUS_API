module __ws_HEXI_GPIO
include __t_KINETIS 

sub function _getAN_1  () as uint8_t
sub function _getRST_1 () as uint8_t
sub function _getCS_1  () as uint8_t
sub function _getSCK_1 () as uint8_t
sub function _getMISO_1() as uint8_t
sub function _getMOSI_1() as uint8_t
sub function _getPWM_1 () as uint8_t
sub function _getINT_1 () as uint8_t
sub function _getRX_1  () as uint8_t
sub function _getTX_1  () as uint8_t
sub function _getSCL_1 () as uint8_t
sub function _getSDA_1 () as uint8_t
sub procedure _setAN_1  (dim state as uint8_t)
sub procedure _setRST_1 (dim state as uint8_t)
sub procedure _setCS_1  (dim state as uint8_t)
sub procedure _setSCK_1 (dim state as uint8_t)
sub procedure _setMISO_1(dim state as uint8_t)
sub procedure _setMOSI_1(dim state as uint8_t)
sub procedure _setPWM_1 (dim state as uint8_t)
sub procedure _setINT_1 (dim state as uint8_t)
sub procedure _setRX_1  (dim state as uint8_t)
sub procedure _setTX_1  (dim state as uint8_t)
sub procedure _setSCL_1 (dim state as uint8_t)
sub procedure _setSDA_1 (dim state as uint8_t)

sub function _getAN_2  () as uint8_t
sub function _getRST_2 () as uint8_t
sub function _getCS_2  () as uint8_t
sub function _getSCK_2 () as uint8_t
sub function _getMISO_2() as uint8_t
sub function _getMOSI_2() as uint8_t
sub function _getPWM_2 () as uint8_t
sub function _getINT_2 () as uint8_t
sub function _getRX_2  () as uint8_t
sub function _getTX_2  () as uint8_t
sub function _getSCL_2 () as uint8_t
sub function _getSDA_2 () as uint8_t
sub procedure _setAN_2  (dim state as uint8_t)
sub procedure _setRST_2 (dim state as uint8_t)
sub procedure _setCS_2  (dim state as uint8_t)
sub procedure _setSCK_2 (dim state as uint8_t)
sub procedure _setMISO_2(dim state as uint8_t)
sub procedure _setMOSI_2(dim state as uint8_t)
sub procedure _setPWM_2 (dim state as uint8_t)
sub procedure _setINT_2 (dim state as uint8_t)
sub procedure _setRX_2  (dim state as uint8_t)
sub procedure _setTX_2  (dim state as uint8_t)
sub procedure _setSCL_2 (dim state as uint8_t)
sub procedure _setSDA_2 (dim state as uint8_t)

sub function _getAN_3  () as uint8_t
sub function _getRST_3 () as uint8_t
sub function _getCS_3  () as uint8_t
sub function _getSCK_3 () as uint8_t
sub function _getMISO_3() as uint8_t
sub function _getMOSI_3() as uint8_t
sub function _getPWM_3 () as uint8_t
sub function _getINT_3 () as uint8_t
sub function _getRX_3  () as uint8_t
sub function _getTX_3  () as uint8_t
sub function _getSCL_3 () as uint8_t
sub function _getSDA_3 () as uint8_t
sub procedure _setAN_3  (dim state as uint8_t)
sub procedure _setRST_3 (dim state as uint8_t)
sub procedure _setCS_3  (dim state as uint8_t)
sub procedure _setSCK_3 (dim state as uint8_t)
sub procedure _setMISO_3(dim state as uint8_t)
sub procedure _setMOSI_3(dim state as uint8_t)
sub procedure _setPWM_3 (dim state as uint8_t)
sub procedure _setINT_3 (dim state as uint8_t)
sub procedure _setRX_3  (dim state as uint8_t)
sub procedure _setTX_3  (dim state as uint8_t)
sub procedure _setSCL_3 (dim state as uint8_t)
sub procedure _setSDA_3 (dim state as uint8_t)

sub function _getAN_4  () as uint8_t
sub function _getRST_4 () as uint8_t
sub function _getCS_4  () as uint8_t
sub function _getSCK_4 () as uint8_t
sub function _getMISO_4() as uint8_t
sub function _getMOSI_4() as uint8_t
sub function _getPWM_4 () as uint8_t
sub function _getINT_4 () as uint8_t
sub function _getRX_4  () as uint8_t
sub function _getTX_4  () as uint8_t
sub function _getSCL_4 () as uint8_t
sub function _getSDA_4 () as uint8_t
sub procedure _setAN_4  (dim state as uint8_t)
sub procedure _setRST_4 (dim state as uint8_t)
sub procedure _setCS_4  (dim state as uint8_t)
sub procedure _setSCK_4 (dim state as uint8_t)
sub procedure _setMISO_4(dim state as uint8_t)
sub procedure _setMOSI_4(dim state as uint8_t)
sub procedure _setPWM_4 (dim state as uint8_t)
sub procedure _setINT_4 (dim state as uint8_t)
sub procedure _setRX_4  (dim state as uint8_t)
sub procedure _setTX_4  (dim state as uint8_t)
sub procedure _setSCL_4 (dim state as uint8_t)
sub procedure _setSDA_4 (dim state as uint8_t)

sub function _gpioInit_1(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret
sub function _gpioInit_2(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret
sub function _gpioInit_3(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret
sub function _gpioInit_4(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret

implements

const _MIKROBUS_ERR_PIN          as byte = 2

const _GPIO_INPUT                as byte = 0
const _GPIO_OUTPUT               as byte = 1

const _MIKROBUS_AN_PIN           as byte = 0
const _MIKROBUS_RST_PIN          as byte = 1
const _MIKROBUS_CS_PIN           as byte = 2
const _MIKROBUS_SCK_PIN          as byte = 3
const _MIKROBUS_MISO_PIN         as byte = 4
const _MIKROBUS_MOSI_PIN         as byte = 5
const _MIKROBUS_PWM_PIN          as byte = 6
const _MIKROBUS_INT_PIN          as byte = 7
const _MIKROBUS_RX_PIN           as byte = 8
const _MIKROBUS_TX_PIN           as byte = 9
const _MIKROBUS_SCL_PIN          as byte = 10
const _MIKROBUS_SDA_PIN          as byte = 11


sub function _getAN_1  () as uint8_t Result = PTB_PDIR.B2  end sub
sub function _getRST_1 () as uint8_t Result = PTB_PDIR.B11 end sub
sub function _getCS_1  () as uint8_t Result = PTC_PDIR.B4  end sub
sub function _getSCK_1 () as uint8_t Result = PTC_PDIR.B5  end sub
sub function _getMISO_1() as uint8_t Result = PTC_PDIR.B7  end sub
sub function _getMOSI_1() as uint8_t Result = PTC_PDIR.B6  end sub
sub function _getPWM_1 () as uint8_t Result = PTA_PDIR.B10 end sub
sub function _getINT_1 () as uint8_t Result = PTB_PDIR.B13 end sub
sub function _getRX_1  () as uint8_t Result = PTD_PDIR.B2  end sub
sub function _getTX_1  () as uint8_t Result = PTD_PDIR.B3  end sub
sub function _getSCL_1 () as uint8_t Result = PTD_PDIR.B8  end sub
sub function _getSDA_1 () as uint8_t Result = PTD_PDIR.B9  end sub
sub procedure _setAN_1  (dim state as uint8_t) PTB_PDOR.B2  = state end sub
sub procedure _setRST_1 (dim state as uint8_t) PTB_PDOR.B11 = state end sub
sub procedure _setCS_1  (dim state as uint8_t) PTC_PDOR.B4  = state end sub
sub procedure _setSCK_1 (dim state as uint8_t) PTC_PDOR.B5  = state end sub
sub procedure _setMISO_1(dim state as uint8_t) PTC_PDOR.B7  = state end sub
sub procedure _setMOSI_1(dim state as uint8_t) PTC_PDOR.B6  = state end sub
sub procedure _setPWM_1 (dim state as uint8_t) PTA_PDOR.B10 = state end sub
sub procedure _setINT_1 (dim state as uint8_t) PTB_PDOR.B13 = state end sub
sub procedure _setRX_1  (dim state as uint8_t) PTD_PDOR.B2  = state end sub
sub procedure _setTX_1  (dim state as uint8_t) PTD_PDOR.B3  = state end sub
sub procedure _setSCL_1 (dim state as uint8_t) PTD_PDOR.B8  = state end sub
sub procedure _setSDA_1 (dim state as uint8_t) PTD_PDOR.B9  = state end sub

sub function _getAN_2  () as uint8_t Result = PTB_PDIR.B3  end sub
sub function _getRST_2 () as uint8_t Result = PTB_PDIR.B19 end sub
sub function _getCS_2  () as uint8_t Result = PTC_PDIR.B3  end sub
sub function _getSCK_2 () as uint8_t Result = PTC_PDIR.B5  end sub
sub function _getMISO_2() as uint8_t Result = PTC_PDIR.B7  end sub
sub function _getMOSI_2() as uint8_t Result = PTC_PDIR.B6  end sub
sub function _getPWM_2 () as uint8_t Result = PTA_PDIR.B11 end sub
sub function _getINT_2 () as uint8_t Result = PTB_PDIR.B8  end sub
sub function _getRX_2  () as uint8_t Result = PTD_PDIR.B2  end sub
sub function _getTX_2  () as uint8_t Result = PTD_PDIR.B3  end sub
sub function _getSCL_2 () as uint8_t Result = PTD_PDIR.B8  end sub
sub function _getSDA_2 () as uint8_t Result = PTD_PDIR.B9  end sub
sub procedure _setAN_2  (dim state as uint8_t) PTB_PDOR.B3  = state end sub
sub procedure _setRST_2 (dim state as uint8_t) PTB_PDOR.B19 = state end sub
sub procedure _setCS_2  (dim state as uint8_t) PTC_PDOR.B3  = state end sub
sub procedure _setSCK_2 (dim state as uint8_t) PTC_PDOR.B5  = state end sub
sub procedure _setMISO_2(dim state as uint8_t) PTC_PDOR.B7  = state end sub
sub procedure _setMOSI_2(dim state as uint8_t) PTC_PDOR.B6  = state end sub
sub procedure _setPWM_2 (dim state as uint8_t) PTA_PDOR.B11 = state end sub
sub procedure _setINT_2 (dim state as uint8_t) PTB_PDOR.B8  = state end sub
sub procedure _setRX_2  (dim state as uint8_t) PTD_PDOR.B2  = state end sub
sub procedure _setTX_2  (dim state as uint8_t) PTD_PDOR.B3  = state end sub
sub procedure _setSCL_2 (dim state as uint8_t) PTD_PDOR.B8  = state end sub
sub procedure _setSDA_2 (dim state as uint8_t) PTD_PDOR.B9  = state end sub

sub function _getAN_3  () as uint8_t Result = PTB_PDIR.B6  end sub
sub function _getRST_3 () as uint8_t Result = PTB_PDIR.B10 end sub
sub function _getCS_3  () as uint8_t Result = PTC_PDIR.B2  end sub
sub function _getSCK_3 () as uint8_t Result = PTC_PDIR.B5  end sub
sub function _getMISO_3() as uint8_t Result = PTC_PDIR.B7  end sub
sub function _getMOSI_3() as uint8_t Result = PTC_PDIR.B6  end sub
sub function _getPWM_3 () as uint8_t Result = PTA_PDIR.B4  end sub
sub function _getINT_3 () as uint8_t Result = PTB_PDIR.B7  end sub
sub function _getRX_3  () as uint8_t Result = PTC_PDIR.B16 end sub
sub function _getTX_3  () as uint8_t Result = PTC_PDIR.B17 end sub
sub function _getSCL_3 () as uint8_t Result = PTA_PDIR.B12 end sub
sub function _getSDA_3 () as uint8_t Result = PTA_PDIR.B13 end sub
sub procedure _setAN_3  (dim state as uint8_t) PTB_PDOR.B6  = state end sub
sub procedure _setRST_3 (dim state as uint8_t) PTB_PDOR.B10 = state end sub
sub procedure _setCS_3  (dim state as uint8_t) PTC_PDOR.B2  = state end sub
sub procedure _setSCK_3 (dim state as uint8_t) PTC_PDOR.B5  = state end sub
sub procedure _setMISO_3(dim state as uint8_t) PTC_PDOR.B7  = state end sub
sub procedure _setMOSI_3(dim state as uint8_t) PTC_PDOR.B6  = state end sub
sub procedure _setPWM_3 (dim state as uint8_t) PTA_PDOR.B4  = state end sub
sub procedure _setINT_3 (dim state as uint8_t) PTB_PDOR.B7  = state end sub
sub procedure _setRX_3  (dim state as uint8_t) PTC_PDOR.B16 = state end sub
sub procedure _setTX_3  (dim state as uint8_t) PTC_PDOR.B17 = state end sub
sub procedure _setSCL_3 (dim state as uint8_t) PTA_PDOR.B12 = state end sub
sub procedure _setSDA_3 (dim state as uint8_t) PTA_PDOR.B13 = state end sub

sub function _getAN_4  () as uint8_t Result = PTA_PDIR.B17 end sub
sub function _getRST_4 () as uint8_t Result = PTA_PDIR.B16 end sub
sub function _getCS_4  () as uint8_t Result = PTA_PDIR.B14 end sub
sub function _getSCK_4 () as uint8_t Result = PTC_PDIR.B5  end sub
sub function _getMISO_4() as uint8_t Result = PTC_PDIR.B7  end sub
sub function _getMOSI_4() as uint8_t Result = PTC_PDIR.B6  end sub
sub function _getPWM_4 () as uint8_t Result = PTA_PDIR.B5  end sub
sub function _getINT_4 () as uint8_t Result = PTA_PDIR.B15 end sub
sub function _getRX_4  () as uint8_t Result = PTC_PDIR.B16 end sub
sub function _getTX_4  () as uint8_t Result = PTC_PDIR.B17 end sub
sub function _getSCL_4 () as uint8_t Result = PTA_PDIR.B12 end sub
sub function _getSDA_4 () as uint8_t Result = PTA_PDIR.B13 end sub
sub procedure _setAN_4  (dim state as uint8_t) PTA_PDOR.B17 = state end sub
sub procedure _setRST_4 (dim state as uint8_t) PTA_PDOR.B16 = state end sub
sub procedure _setCS_4  (dim state as uint8_t) PTA_PDOR.B14 = state end sub
sub procedure _setSCK_4 (dim state as uint8_t) PTC_PDOR.B5  = state end sub
sub procedure _setMISO_4(dim state as uint8_t) PTC_PDOR.B7  = state end sub
sub procedure _setMOSI_4(dim state as uint8_t) PTC_PDOR.B6  = state end sub
sub procedure _setPWM_4 (dim state as uint8_t) PTA_PDOR.B5  = state end sub
sub procedure _setINT_4 (dim state as uint8_t) PTA_PDOR.B15 = state end sub
sub procedure _setRX_4  (dim state as uint8_t) PTC_PDOR.B16 = state end sub
sub procedure _setTX_4  (dim state as uint8_t) PTC_PDOR.B17 = state end sub
sub procedure _setSCL_4 (dim state as uint8_t) PTA_PDOR.B12 = state end sub
sub procedure _setSDA_4 (dim state as uint8_t) PTA_PDOR.B13 = state end sub



sub function _gpioInit_1(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret

Result = 0
    select case pin
                case _MIKROBUS_AN_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTB_PDIR, _GPIO_PINMASK_2 )  else GPIO_Digital_Output(@PTB_PDOR, _GPIO_PINMASK_2 )  end if
                case _MIKROBUS_RST_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTB_PDIR, _GPIO_PINMASK_11)  else GPIO_Digital_Output(@PTB_PDOR, _GPIO_PINMASK_11) end if
                case _MIKROBUS_CS_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_4 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_4 )  end if
                case _MIKROBUS_SCK_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_5 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_5 )  end if
                case _MIKROBUS_MISO_PIN  if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_7 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_7 )  end if
                case _MIKROBUS_MOSI_PIN  if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_6 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_6 )  end if
                case _MIKROBUS_PWM_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTA_PDIR, _GPIO_PINMASK_10)  else GPIO_Digital_Output(@PTA_PDOR, _GPIO_PINMASK_10) end if
                case _MIKROBUS_INT_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTB_PDIR, _GPIO_PINMASK_13)  else GPIO_Digital_Output(@PTB_PDOR, _GPIO_PINMASK_13) end if
                case _MIKROBUS_RX_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTD_PDIR, _GPIO_PINMASK_2 )  else GPIO_Digital_Output(@PTD_PDOR, _GPIO_PINMASK_2 )  end if
                case _MIKROBUS_TX_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTD_PDIR, _GPIO_PINMASK_3 )  else GPIO_Digital_Output(@PTD_PDOR, _GPIO_PINMASK_3 )  end if
                case _MIKROBUS_SCL_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTD_PDIR, _GPIO_PINMASK_8 )  else GPIO_Digital_Output(@PTD_PDOR, _GPIO_PINMASK_8 )  end if
                case _MIKROBUS_SDA_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTD_PDIR, _GPIO_PINMASK_9 )  else GPIO_Digital_Output(@PTD_PDOR, _GPIO_PINMASK_9 )  end if
        case else Result = _MIKROBUS_ERR_PIN
    end select
end sub

sub function _gpioInit_2(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret

Result = 0
    select case pin
                case _MIKROBUS_AN_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTB_PDIR, _GPIO_PINMASK_3 )  else GPIO_Digital_Output(@PTB_PDOR, _GPIO_PINMASK_3 )  end if
                case _MIKROBUS_RST_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTB_PDIR, _GPIO_PINMASK_19)  else GPIO_Digital_Output(@PTB_PDOR, _GPIO_PINMASK_19) end if
                case _MIKROBUS_CS_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_3 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_3 )  end if
                case _MIKROBUS_SCK_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_5 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_5 )  end if
                case _MIKROBUS_MISO_PIN  if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_7 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_7 )  end if
                case _MIKROBUS_MOSI_PIN  if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_6 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_6 )  end if
                case _MIKROBUS_PWM_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTA_PDIR, _GPIO_PINMASK_11)  else GPIO_Digital_Output(@PTA_PDOR, _GPIO_PINMASK_11) end if
                case _MIKROBUS_INT_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTB_PDIR, _GPIO_PINMASK_8 )  else GPIO_Digital_Output(@PTB_PDOR, _GPIO_PINMASK_8 )  end if
                case _MIKROBUS_RX_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTD_PDIR, _GPIO_PINMASK_2 )  else GPIO_Digital_Output(@PTD_PDOR, _GPIO_PINMASK_2 ) end if
                case _MIKROBUS_TX_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTD_PDIR, _GPIO_PINMASK_3 )  else GPIO_Digital_Output(@PTD_PDOR, _GPIO_PINMASK_3 ) end if
                case _MIKROBUS_SCL_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTD_PDIR, _GPIO_PINMASK_8 )  else GPIO_Digital_Output(@PTD_PDOR, _GPIO_PINMASK_8 )  end if
                case _MIKROBUS_SDA_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTD_PDIR, _GPIO_PINMASK_9 )  else GPIO_Digital_Output(@PTD_PDOR, _GPIO_PINMASK_9 )  end if
        case else Result = _MIKROBUS_ERR_PIN
    end select
end sub

sub function _gpioInit_3(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret

Result = 0
    select case pin
                case _MIKROBUS_AN_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTB_PDIR, _GPIO_PINMASK_6 )  else GPIO_Digital_Output(@PTB_PDOR, _GPIO_PINMASK_6 )  end if
                case _MIKROBUS_RST_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTB_PDIR, _GPIO_PINMASK_10)  else GPIO_Digital_Output(@PTB_PDOR, _GPIO_PINMASK_10) end if
                case _MIKROBUS_CS_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_2 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_2 )  end if
                case _MIKROBUS_SCK_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_5 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_5 )  end if
                case _MIKROBUS_MISO_PIN  if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_7 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_7 )  end if
                case _MIKROBUS_MOSI_PIN  if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_6 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_6 )  end if
                case _MIKROBUS_PWM_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTA_PDIR, _GPIO_PINMASK_4 )  else GPIO_Digital_Output(@PTA_PDOR, _GPIO_PINMASK_4 )  end if
                case _MIKROBUS_INT_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTB_PDIR, _GPIO_PINMASK_7 )  else GPIO_Digital_Output(@PTB_PDOR, _GPIO_PINMASK_7 )  end if
                case _MIKROBUS_RX_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_16)  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_16) end if
                case _MIKROBUS_TX_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_17)  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_17) end if
                case _MIKROBUS_SCL_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTA_PDIR, _GPIO_PINMASK_12)  else GPIO_Digital_Output(@PTA_PDOR, _GPIO_PINMASK_12)  end if
                case _MIKROBUS_SDA_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTA_PDIR, _GPIO_PINMASK_13)  else GPIO_Digital_Output(@PTA_PDOR, _GPIO_PINMASK_13)  end if
        case else Result = _MIKROBUS_ERR_PIN
    end select
end sub


sub function _gpioInit_4(dim pin as T_mikrobus_pin, dim direction as T_gpio_dir) as T_mikrobus_ret

Result = 0
    select case pin
                case _MIKROBUS_AN_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTA_PDIR, _GPIO_PINMASK_17)  else GPIO_Digital_Output(@PTA_PDOR, _GPIO_PINMASK_17)  end if
                case _MIKROBUS_RST_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTA_PDIR, _GPIO_PINMASK_16)  else GPIO_Digital_Output(@PTA_PDOR, _GPIO_PINMASK_16) end if
                case _MIKROBUS_CS_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTA_PDIR, _GPIO_PINMASK_14)  else GPIO_Digital_Output(@PTA_PDOR, _GPIO_PINMASK_14)  end if
                case _MIKROBUS_SCK_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_5 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_5 )  end if
                case _MIKROBUS_MISO_PIN  if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_7 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_7 )  end if
                case _MIKROBUS_MOSI_PIN  if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_6 )  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_6 )  end if
                case _MIKROBUS_PWM_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTA_PDIR, _GPIO_PINMASK_5 )  else GPIO_Digital_Output(@PTA_PDOR, _GPIO_PINMASK_5 )  end if
                case _MIKROBUS_INT_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTA_PDIR, _GPIO_PINMASK_15)  else GPIO_Digital_Output(@PTA_PDOR, _GPIO_PINMASK_15)  end if
                case _MIKROBUS_RX_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_16)  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_16) end if
                case _MIKROBUS_TX_PIN    if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTC_PDIR, _GPIO_PINMASK_17)  else GPIO_Digital_Output(@PTC_PDOR, _GPIO_PINMASK_17) end if
                case _MIKROBUS_SCL_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTA_PDIR, _GPIO_PINMASK_12)  else GPIO_Digital_Output(@PTA_PDOR, _GPIO_PINMASK_12)  end if
                case _MIKROBUS_SDA_PIN   if (direction = _GPIO_INPUT) then GPIO_Digital_Input(@PTA_PDIR, _GPIO_PINMASK_13)  else GPIO_Digital_Output(@PTA_PDOR, _GPIO_PINMASK_13)  end if
        case else Result = _MIKROBUS_ERR_PIN
    end select
end sub

end.