unit __t_AVR;

type uint8_t  = byte;
type int8_t   = short;
type uint16_t = word;
type int16_t  = integer;
type uint32_t = dword;
type int32_t  = longint;

type T_gpio_dir = byte;
type T_mikrobus_soc = byte;
type T_mikrobus_pin = byte;
type T_mikrobus_ret = byte;

// --------------------------------------------------- COMPILER SPECIFIC TYPES /

type T_gpio_setFp = procedure( state : uint8_t );
type T_gpio_getFp = function() : uint8_t;

{$IFDEF ENABLE_LOG}

type T_log_bus            = byte;
type T_log_format         = byte;
type T_log_writeFp        = procedure(data_ : byte);

{$ENDIF}
{$IFDEF ENABLE_SPI}


type T_spi_writeFp        = procedure(data_ : byte);
type T_spi_readFp         = function(buffer : byte) : byte;

{$ENDIF}
{$IFDEF ENABLE_I2C}

type T_i2c_startFp        = function() : char;
type T_i2c_stopFp         = procedure();
type T_i2c_writeFp        = procedure(data_ : byte);
type T_i2c_readFp         = function(ack : byte) : byte;

{$ENDIF}
{$IFDEF ENABLE_UART}

type T_uart_writeFp       = procedure(data_: byte);
type T_uart_readFp        = function() : byte;
type T_uart_readyFp       = function() : byte;

{$ENDIF}

// ------------------------------------------------------------- HAL STRUCTUES /
// DO NOT EDIT /

type T_gpio_obj = record
    gpioSet : array[12] of ^T_gpio_setFp;
    gpioGet : array[12] of ^T_gpio_getFp;
end;

{$IFDEF ENABLE_SPI}

type T_spi_obj = record
    spiWrite : ^T_spi_writeFp;
    spiRead  : ^T_spi_readFp;
end;

{$ENDIF}
{$IFDEF ENABLE_I2C}

type T_i2c_obj = record
    i2cStart   : ^T_i2c_startFp;
    i2cStop    : ^T_i2c_stopFp;
    i2cWrite   : ^T_i2c_writeFp;
    i2cRead    : ^T_i2c_readFp;
end;

{$ENDIF}
{$IFDEF ENABLE_UART}

type T_uart_obj = record
    uartWrite : ^T_uart_writeFp;
    uartRead  : ^T_uart_readFp;
    uartReady : ^T_uart_readyFp;
end;

{$ENDIF}

implementation

end.